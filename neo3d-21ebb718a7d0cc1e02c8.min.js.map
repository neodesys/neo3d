{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/neo3d/math.js","webpack:///./src/neo3d/Mesh.js","webpack:///./src/neo3d/Quat.js","webpack:///./src/neo3d/Vec4.js","webpack:///./src/neo3d/Mat2.js","webpack:///./src/neo3d/Mat3.js","webpack:///./src/neo3d/index.js","webpack:///./src/neo3d/neo3d.js","webpack:///./src/neo3d/Shader.js","webpack:///./src/neo3d/Vec2.js","webpack:///./src/neo3d/Vec3.js","webpack:///./src/neo3d/Mat4.js","webpack:///./src/neo3d/PlaneMesh.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","freeze","EPSILON","EPSILON2","PI","Math","HALF_PI","TWO_PI","RAD2DEG","DEG2RAD","abs","sqrt","cos","acos","sin","tan","atan2","log","exp","pow","Mesh","primitiveType","indexType","PRIMITIVE_TYPE","NB_ELEMS","this","_primitiveType","INDEX_TYPE","_indexType","_gl","_pointCount","_attribConfigList","_attribVBOList","_indexVBO","AttribConfig","vboIdx","componentType","COMPONENT_TYPE","FLOAT","nbComponents","offset","stride","bNormalized","NO_PRIMITIVE","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","NO_INDEX","UNSIGNED_SHORT","UNSIGNED_INT","NO_COMPONENT","BYTE","UNSIGNED_BYTE","SHORT","ATTRIB_TYPE","VERTEX","TEX_COORDS","VERTEX_COLOR","NORMAL","BINORMAL","TANGENT","BONE_IDX","BONE_WEIGHT","USER_ATTRIB","_initAttribConfig","_initVBO","_createStaticVBO","data","bIndexVBO","isContextLost","buffer","ArrayBuffer","target","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","vbo","createBuffer","bindBuffer","bufferData","STATIC_DRAW","error","getError","NO_ERROR","CONTEXT_LOST_WEBGL","window","console","warn","deleteBuffer","init","gl","bContextLost","WebGLRenderingContext","length","_bExtendedIndexType","_bHadExtendedIndexType","nbBuffers","shut","isReady","getPrimitiveType","getIndexType","getIndexVBO","getPointCount","bindAttribBuffer","location","attribType","layer","attribConfig","Array","nbLayers","compType","vertexAttribPointer","math","Vec4","Quat","Float32Array","setFromValues","x","y","z","w","setFromArray","arr","setFromAxisAndAngle","v3","angle","bufferSetFromAxisAndAngle","setFromRotationTo","v3Start","v3End","bufferSetFromRotationTo","setFromRotationMat3","m3","bufferSetFromRotationMat3","setFromRotationMat4","m4","bufferSetFromRotationMat4","setIdentity","copy","q","getAxisAndAngle","bufferGetAxisAndAngle","isNull","bufferIsNull","isIdentity","bufferIsIdentity","equals","bufferEquals","fastRotationEquals","bufferFastRotationEquals","rotationEquals","bufferRotationEquals","scale","bufferScale","scaleInPlace","bufferScaleInPlace","negate","bufferNegate","negateInPlace","conjugate","bufferConjugate","conjugateInPlace","multiply","qA","qB","bufferMultiply","multiplyInPlace","invert","bufferInvert","invertInPlace","squareNorm","bufferSquareNorm","norm","bufferNorm","normalize","bufferNormalize","normalizeInPlace","dotProduct","bufferDotProduct","bufferLog","logInPlace","bufferExp","expInPlace","bufferPow","powInPlace","transformVec3","outV3","inV3","bufferTransformVec3","transformVec3InPlace","lerp","q0","q1","bufferLerp","slerp","bufferSlerp","squad","s0","s1","bufferSquad","computeSquadIntermediate","q2","bufferComputeSquadIntermediate","NB_COMPONENTS","IDENTITY","nbElems","bufferLinear","outBuffer","outOffset","inV3Buffer","inV3Offset","inV3StartBuffer","inV3StartOffset","inV3EndBuffer","inV3EndOffset","x0","y0","z0","n0","x1","y1","z1","n1","dot","inM3Buffer","inM3Offset","trace","f","j","k","inM4Buffer","inM4Offset","outV3Buffer","outV3Offset","inBuffer","inOffset","theta","inBufferA","inOffsetA","inBufferB","inOffsetB","xa","ya","za","wa","xb","yb","zb","wb","na","nb","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","n2","expW","inQBuffer","inQOffset","vx","vy","vz","qx","qy","qz","qw","rx","ry","rz","rw","inBufferQ0","inOffsetQ0","inBufferQ1","inOffsetQ1","w0","w1","invSin","_sharedTmpBuffer","inBufferS0","inOffsetS0","inBufferS1","inOffsetS1","inBufferQ2","inOffsetQ2","setFromVec3Pos","setFromVec3Dir","setNull","setOne","v4","add","v4A","v4B","bufferAdd","addInPlace","bufferAddInPlace","substract","bufferSubstract","substractInPlace","bufferSubstractInPlace","addScaled","bufferAddScaled","addScaledInPlace","bufferAddScaledInPlace","squareDistance","bufferSquareDistance","distance","bufferDistance","linear","p0","p1","quadratic","p2","bufferQuadratic","hermite","tan0","tan1","bufferHermite","bezier","ctrl0","ctrl1","bufferBezier","catmullRom","p3","bufferCatmullRom","I","J","K","L","inBufferP0","inOffsetP0","inBufferP1","inOffsetP1","inBufferP2","inOffsetP2","f0","f1","f2","inBufferT0","inOffsetT0","inBufferT1","inOffsetT1","tt","f3","inBufferC0","inOffsetC0","inBufferC1","inOffsetC1","lessT","lessT2","inBufferP3","inOffsetP3","lessHalfT","Mat2","setColumnVec2","col","v2","setFromColumnsVec2","v2i","v2j","setFromRotAngle","bufferSetFromRotAngle","setFromMat3RotScale","bufferSetFromMat3RotScale","setFromRSTransfo","rotAngle","scaleV2","bufferSetFromRSTransfo","m2","getRSTransfo","bufferGetRSTransfo","normalizeRSTransfo","bufferNormalizeRSTransfo","normalizeRSTransfoInPlace","m2A","m2B","transpose","bufferTranspose","transposeInPlace","transformVec2","outV2","inV2","bufferTransformVec2","transformVec2InPlace","cosa","sina","inMat3Buffer","inMat3Offset","inScaleVec2Buffer","inScaleVec2Offset","sx","sy","_orthoNormalizeTransfo","inMatBuffer","inMatOffset","vecSize","outScaleVec2Buffer","outScaleVec2Offset","inMat2Buffer","inMat2Offset","m00","m01","m10","m11","det","outV2Buffer","outV2Offset","inM2Buffer","inM2Offset","inV2Buffer","inV2Offset","Mat3","setColumnVec3","setFromColumnsVec3","v3i","v3j","v3k","v2k","setFromQuat","bufferSetFromQuat","setFromMat4RotScale","bufferSetFromMat4RotScale","setFromRSTransfo3D","rotQuat","scaleV3","bufferSetFromRSTransfo3D","setRotation2D","bufferSetRotation2D","setRotScale2DFromMat2","bufferSetRotScale2DFromMat2","setFromTRSTransfo2D","transV2","bufferSetFromTRSTransfo2D","getRSTransfo3D","bufferGetRSTransfo3D","normalizeRSTransfo3D","bufferNormalizeRSTransfo3D","normalizeRSTransfo3DInPlace","getTRSTransfo2D","bufferGetTRSTransfo2D","normalizeTRSTransfo2D","bufferNormalizeTRSTransfo2D","normalizeTRSTransfo2DInPlace","m3A","m3B","transformVec2Pos","bufferTransformVec2Pos","transformVec2PosInPlace","transformVec2Dir","bufferTransformVec2Dir","transformVec2DirInPlace","x2","x2x","x2y","x2z","x2w","y2","y2y","y2z","y2w","z2","z2z","z2w","inMat4Buffer","inMat4Offset","inRotQuatBuffer","inRotQuatOffset","inScaleVec3Buffer","inScaleVec3Offset","sz","inTransVec2Buffer","inTransVec2Offset","outRotQuatBuffer","outRotQuatOffset","outScaleVec3Buffer","outScaleVec3Offset","outTransVec2Buffer","outTransVec2Offset","m02","m12","m20","m21","m22","c00","c01","c02","neo3d","Shader","Vec2","Vec3","Mat4","PlaneMesh","_glSurfaces","GL_CTX_STATE","FIRST_INIT","CTX_LOST","NEED_INIT_AFTER_LOST","READY","RenderingSurface","rdr","getExtension","_rdr","_autoDraw","_lastDrawingBufferWidth","_lastDrawingBufferHeight","_glCtxState","that","_ctxLostListener","event","preventDefault","_activeShader","unbind","_ctxRestoredListener","canvas","addEventListener","destroy","removeEventListener","size","splice","width","_renderFrame","onInitContext","drawingBufferWidth","drawingBufferHeight","onSurfaceResized","onDrawFrame","_perfNow","performance","now","mozNow","webkitNow","oNow","msNow","Date","drawSingleFrame","setAutoDrawing","bEnable","isAutoDrawing","_drawRequestID","_lastDrawingTime","_fps","_requestAnimationFrame","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","cb","setTimeout","_cancelAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","id","clearTimeout","_continuousFrameDrawing","dt","rdrSurf","e","message","createRenderingSurface","bAntialias","bAlpha","document","getElementById","HTMLCanvasElement","getContext","antialias","alpha","push","findRenderingSurface","startDrawing","stopDrawing","isDrawing","getFPS","load2DTexture","noRepeat","noMipmap","HTMLImageElement","complete","ImageData","tex","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","deleteTexture","param","REPEAT","CLAMP_TO_EDGE","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","generateMipmap","vtxSrc","fragSrc","_prog","_lastDrawnMesh","_overridenPrimitiveType","_vtxSrc","_fragSrc","_loadShader","type","src","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","_initShaderLocations","_bindShader","_unbindShader","_bindMeshAttribs","vtxShader","VERTEX_SHADER","fragShader","FRAGMENT_SHADER","prog","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","_linkProgram","useProgram","isBound","getActiveShader","drawMesh","mesh","firstPointIndex","nbPoints","maxPoints","drawArrays","drawElements","v2A","v2B","shortestAngle","bufferShortestAngle","isPerpendicular","bufferArePerpendicular","isColinear","bufferAreColinear","setFromVec2Pos","setFromVec2Dir","v3A","v3B","crossProduct","bufferCrossProduct","crossProductInPlace","setColumnVec4","setFromColumnsVec4","v4i","v4j","v4k","v4l","v3l","setRotationFromQuat","bufferSetRotationFromQuat","setRotScaleFromMat3","bufferSetRotScaleFromMat3","setFromTRSTransfo","transV3","bufferSetFromTRSTransfo","getTRSTransfo","bufferGetTRSTransfo","normalizeTRSTransfo","bufferNormalizeTRSTransfo","normalizeTRSTransfoInPlace","m4A","m4B","transformVec4","outV4","inV4","bufferTransformVec4","transformVec4InPlace","transformVec3Pos","bufferTransformVec3Pos","transformVec3PosInPlace","transformVec3Dir","bufferTransformVec3Dir","transformVec3DirInPlace","buildFrustumProj","left","right","bottom","top","near","far","bufferBuildFrustumProj","buildPerspectiveProj","fov","aspect","bufferBuildPerspectiveProj","buildOrthoProj","bufferBuildOrthoProj","buildLookAtView","eyeV3","targetV3","upV3","bufferBuildLookAtView","buildFPSView","pitchAngle","yawAngle","bufferBuildFPSView","inTransVec3Buffer","inTransVec3Offset","outTransVec3Buffer","outTransVec3Offset","m03","m13","m23","m30","m31","m32","m33","s00","s01","s02","s03","s04","s05","c03","c04","c05","outV4Buffer","outV4Offset","inV4Buffer","inV4Offset","rl","tb","nf","near2","eyeV3Buffer","eyeV3Offset","targetV3Buffer","targetV3Offset","upV3Buffer","upV3Offset","xEye","yEye","zEye","xUp","yUp","zUp","height","vSubdivs","hSubdivs","bGenTexCoords","nbVtx","_dim","_subdivs","_bGenTexCoords","constructor","vtx","idx","xStep","yStep","index","u","v","uStep","vStep","Uint16Array"],"mappings":"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","file":"neo3d-21ebb718a7d0cc1e02c8.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY, without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nmodule.exports = Object.freeze({\n    EPSILON: 1e-6,\n    EPSILON2: 1e-12,\n    PI: Math.PI,\n    HALF_PI: 0.5 * Math.PI,\n    TWO_PI: 2.0 * Math.PI,\n    RAD2DEG: 180.0 / Math.PI,\n    DEG2RAD: Math.PI / 180.0,\n    abs: Math.abs,\n    sqrt: Math.sqrt,\n    cos: Math.cos,\n    acos: Math.acos,\n    sin: Math.sin,\n    tan: Math.tan,\n    atan2: Math.atan2,\n    log: Math.log,\n    exp: Math.exp,\n    pow: Math.pow\n});\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar Mesh = module.exports = function(primitiveType, indexType)\n{\n    if ((typeof (primitiveType) === \"number\") &&\n        (primitiveType > 0) && (primitiveType < Mesh.PRIMITIVE_TYPE.NB_ELEMS))\n    {\n        this._primitiveType = primitiveType;\n    }\n    else\n    {\n        this._primitiveType = 0;\n    }\n\n    if ((typeof (indexType) === \"number\") &&\n        (indexType > 0) && (indexType < Mesh.INDEX_TYPE.NB_ELEMS))\n    {\n        this._indexType = indexType;\n    }\n    else\n    {\n        this._indexType = 0;\n    }\n\n    this._gl = null;\n    this._pointCount = 0;\n    this._attribConfigList = null;\n    this._attribVBOList = null;\n    this._indexVBO = null;\n};\n\nMesh.AttribConfig = function()\n{\n    this.vboIdx = 0;          //associated VBO index in _attribVBOList array\n    this.componentType = Mesh.COMPONENT_TYPE.FLOAT; //one of Mesh.COMPONENT_TYPE values\n    this.nbComponents = 3;    //from 1 to 4\n    this.offset = 0;          //in bytes\n    this.stride = 0;          //in bytes, maximum stride in WebGL is 255\n    this.bNormalized = false; //if true, values stored in an integer format are mapped to [-1.f, 1.f] or [0.f, 1.f]\n};\n\nMesh.PRIMITIVE_TYPE = Object.freeze({\n    NO_PRIMITIVE: 0,\n    POINTS: 1,\n    LINES: 2,\n    LINE_STRIP: 3,\n    LINE_LOOP: 4,\n    TRIANGLES: 5,\n    TRIANGLE_STRIP: 6,\n    TRIANGLE_FAN: 7,\n    NB_ELEMS: 8\n});\n\nMesh.INDEX_TYPE = Object.freeze({\n    NO_INDEX: 0,\n    UNSIGNED_SHORT: 1,\n    UNSIGNED_INT: 2,\n    NB_ELEMS: 3\n});\n\nMesh.COMPONENT_TYPE = Object.freeze({\n    NO_COMPONENT: 0,\n    BYTE: 1,\n    UNSIGNED_BYTE: 2,\n    SHORT: 3,\n    UNSIGNED_SHORT: 4,\n    FLOAT: 5,\n    NB_ELEMS: 6\n});\n\nMesh.ATTRIB_TYPE = Object.freeze({\n    VERTEX: 0,\n    TEX_COORDS: 1,\n    VERTEX_COLOR: 2,\n    NORMAL: 3,\n    BINORMAL: 4,\n    TANGENT: 5,\n    BONE_IDX: 6,\n    BONE_WEIGHT: 7,\n    USER_ATTRIB: 8\n});\n\nMesh.prototype._initAttribConfig = function()\n{\n    //Override this method to populate this._attribConfigList array with\n    //Mesh.AttribConfig objects and set this._pointCount value.\n    //this._gl is guaranteed to be valid.\n    //this._attribConfigList is guaranteed to be a valid empty array.\n    //\n    //Don't create VBO yet, VBO will be created during this._initVBO() call.\n};\n\nMesh.prototype._initVBO = function()\n{\n    //Override this method to populate this._attribVBOList array and init\n    //this._indexVBO if this._indexType is different from\n    //Mesh.INDEX_TYPE.NO_INDEX.\n    //this._gl is guaranteed to be valid.\n    //this._pointCount is guaranteed to be strictly positive.\n    //this._attribConfigList is guaranteed to be a valid array.\n    //this._attribVBOList is guaranteed to be a valid empty array.\n    //\n    //WARNING: check this._indexType actual value before building\n    //this._indexVBO if needed. If this._indexType has been set to\n    //Mesh.INDEX_TYPE.UNSIGNED_INT at object construction, its value may\n    //have been switched to Mesh.INDEX_TYPE.UNSIGNED_SHORT during mesh\n    //initialization if OpenGL OES_element_index_uint extension is not\n    //available. You have to build the index VBO according to\n    //this._indexType ACTUAL value and NOT the value set during construction.\n};\n\nMesh.prototype._createStaticVBO = function(data, bIndexVBO)\n{\n    if (this._gl && !this._gl.isContextLost() &&\n        data && (data.buffer instanceof ArrayBuffer))\n    {\n        var target = this._gl.ARRAY_BUFFER;\n        if (bIndexVBO === true)\n        {\n            target = this._gl.ELEMENT_ARRAY_BUFFER;\n        }\n\n        var vbo = this._gl.createBuffer();\n        if (vbo)\n        {\n            this._gl.bindBuffer(target, vbo);\n            this._gl.bufferData(target, data, this._gl.STATIC_DRAW);\n            this._gl.bindBuffer(target, null);\n\n            var error = this._gl.getError();\n            if (error !== this._gl.NO_ERROR)\n            {\n                if (error !== this._gl.CONTEXT_LOST_WEBGL)\n                {\n                    window.console.warn(\"cannot create static VBO (err: #\" + error + \")\");\n                    this._gl.deleteBuffer(vbo);\n                }\n\n                return null;\n            }\n\n            return vbo;\n        }\n    }\n\n    return null;\n};\n\nMesh.prototype.init = function(gl, bContextLost)\n{\n    if (!(gl instanceof WebGLRenderingContext) || gl.isContextLost() ||\n        (this._gl && (this._gl !== gl)))\n    {\n        return false;\n    }\n\n    //If this._attribVBOList is valid, then this._gl, this._attribConfigList\n    //and this._pointCount are guaranteed to be valid.\n    //Indeed, this._indexType equals Mesh.INDEX_TYPE.NO_INDEX or\n    //this._indexVBO is also valid.\n    if (bContextLost)\n    {\n        this._attribVBOList = null;\n        this._indexVBO = null;\n    }\n    else if (this._attribVBOList)\n    {\n        return true;\n    }\n\n    if (!this._attribConfigList)\n    {\n        //Init AttribConfig list\n        this._gl = gl;\n        this._attribConfigList = [];\n        this._initAttribConfig();\n\n        if ((this._attribConfigList.length <= 0) || (this._pointCount <= 0))\n        {\n            this._gl = null;\n            this._attribConfigList = null;\n            this._pointCount = 0;\n            return false;\n        }\n\n        if ((this._indexType === Mesh.INDEX_TYPE.UNSIGNED_INT) &&\n            !this._gl._bExtendedIndexType)\n        {\n            this._indexType = Mesh.INDEX_TYPE.UNSIGNED_SHORT;\n            this._bHadExtendedIndexType = true;\n        }\n    }\n\n    //Init VBO buffers\n    this._attribVBOList = [];\n    this._initVBO();\n\n    var nbBuffers = this._attribVBOList.length;\n    if (nbBuffers <= 0)\n    {\n        this._attribVBOList = null;\n\n        if (this._indexVBO)\n        {\n            this._gl.deleteBuffer(this._indexVBO);\n            this._indexVBO = null;\n        }\n\n        return false;\n    }\n\n    if ((this._indexType !== Mesh.INDEX_TYPE.NO_INDEX) && !this._indexVBO)\n    {\n        for (var i = 0; i < nbBuffers; ++i)\n        {\n            this._gl.deleteBuffer(this._attribVBOList[i]);\n        }\n\n        this._attribVBOList = null;\n        return false;\n    }\n\n    return true;\n};\n\nMesh.prototype.shut = function()\n{\n    //If this._attribVBOList is valid, then this._gl is guaranteed to be valid.\n    if (this._attribVBOList && !this._gl.isContextLost())\n    {\n        var nbBuffers = this._attribVBOList.length;\n        for (var i = 0; i < nbBuffers; ++i)\n        {\n            this._gl.deleteBuffer(this._attribVBOList[i]);\n        }\n\n        if (this._indexVBO)\n        {\n            this._gl.deleteBuffer(this._indexVBO);\n        }\n    }\n\n    this._gl = null;\n    this._pointCount = 0;\n    this._attribConfigList = null;\n    this._attribVBOList = null;\n    this._indexVBO = null;\n\n    if (this._bHadExtendedIndexType === true)\n    {\n        this._indexType = Mesh.INDEX_TYPE.UNSIGNED_INT;\n        delete this._bHadExtendedIndexType;\n    }\n};\n\nMesh.prototype.isReady = function(gl)\n{\n    //If this._attribVBOList is valid, then this._gl, this._attribConfigList\n    //and this._pointCount are guaranteed to be valid.\n    //Indeed, this._indexType equals Mesh.INDEX_TYPE.NO_INDEX or\n    //this._indexVBO is also valid.\n    return (this._attribVBOList && (this._gl === gl));\n};\n\nMesh.prototype.getPrimitiveType = function()\n{\n    return this._primitiveType;\n};\n\nMesh.prototype.getIndexType = function()\n{\n    return this._indexType;\n};\n\nMesh.prototype.getIndexVBO = function()\n{\n    return this._indexVBO;\n};\n\nMesh.prototype.getPointCount = function()\n{\n    return this._pointCount;\n};\n\nMesh.prototype.bindAttribBuffer = function(location, attribType, layer)\n{\n    //If this._attribVBOList is valid, then this._gl, this._attribConfigList\n    //and this._pointCount are guaranteed to be valid.\n    if (this._attribVBOList &&\n        (typeof (location) === \"number\") && (location >= 0) &&\n        (typeof (attribType) === \"number\") && (attribType >= 0) &&\n        (attribType < this._attribConfigList.length))\n    {\n        var attribConfig = this._attribConfigList[attribType];\n        if (attribConfig instanceof Array)\n        {\n            var nbLayers = attribConfig.length;\n            if (nbLayers <= 0)\n            {\n                return false;\n            }\n\n            if ((typeof (layer) === \"number\") && (layer > 0))\n            {\n                if (layer >= nbLayers)\n                {\n                    layer = nbLayers - 1;\n                }\n            }\n            else\n            {\n                layer = 0;\n            }\n\n            attribConfig = attribConfig[layer];\n        }\n\n        if ((attribConfig instanceof Mesh.AttribConfig) &&\n            (attribConfig.vboIdx >= 0) &&\n            (attribConfig.vboIdx < this._attribVBOList.length))\n        {\n            var vbo = this._attribVBOList[attribConfig.vboIdx];\n            if (vbo)\n            {\n                var compType;\n                switch (attribConfig.componentType)\n                {\n                    case Mesh.COMPONENT_TYPE.BYTE:\n                        compType = this._gl.BYTE;\n                        break;\n\n                    case Mesh.COMPONENT_TYPE.UNSIGNED_BYTE:\n                        compType = this._gl.UNSIGNED_BYTE;\n                        break;\n\n                    case Mesh.COMPONENT_TYPE.SHORT:\n                        compType = this._gl.SHORT;\n                        break;\n\n                    case Mesh.COMPONENT_TYPE.UNSIGNED_SHORT:\n                        compType = this._gl.UNSIGNED_SHORT;\n                        break;\n\n                    case Mesh.COMPONENT_TYPE.FLOAT:\n                        compType = this._gl.FLOAT;\n                        break;\n\n                    default:\n                        return false;\n                }\n\n                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, vbo);\n                this._gl.vertexAttribPointer(location, attribConfig.nbComponents, compType, attribConfig.bNormalized, attribConfig.stride, attribConfig.offset);\n\n                return true;\n            }\n        }\n    }\n\n    return false;\n};\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar math = require(\"./math\");\nvar Vec4 = require(\"./Vec4\");\n\nvar Quat = module.exports = function()\n{\n    //Always initialized to 0\n    this.buffer = new Float32Array(4);\n    this.buffer[3] = 1.0;\n};\n\nQuat.prototype.setFromValues = function(x, y, z, w)\n{\n    this.buffer[0] = x;\n    this.buffer[1] = y;\n    this.buffer[2] = z;\n    this.buffer[3] = w;\n\n    return this;\n};\n\nQuat.prototype.setFromArray = function(arr)\n{\n    this.buffer[0] = arr[0];\n    this.buffer[1] = arr[1];\n    this.buffer[2] = arr[2];\n    this.buffer[3] = arr[3];\n\n    return this;\n};\n\nQuat.prototype.setFromAxisAndAngle = function(v3, angle)\n{\n    Quat.bufferSetFromAxisAndAngle(this.buffer, 0, v3.buffer, 0, angle);\n    return this;\n};\n\nQuat.prototype.setFromRotationTo = function(v3Start, v3End)\n{\n    Quat.bufferSetFromRotationTo(this.buffer, 0, v3Start.buffer, 0, v3End.buffer, 0);\n    return this;\n};\n\nQuat.prototype.setFromRotationMat3 = function(m3)\n{\n    //m3 must be a pure 3x3 rotation matrix\n    Quat.bufferSetFromRotationMat3(this.buffer, 0, m3.buffer, 0);\n    return this;\n};\n\nQuat.prototype.setFromRotationMat4 = function(m4)\n{\n    //m4 upper-left 3x3 sub-matrix must be a pure rotation matrix\n    Quat.bufferSetFromRotationMat4(this.buffer, 0, m4.buffer, 0);\n    return this;\n};\n\nQuat.prototype.setIdentity = function()\n{\n    this.buffer[0] = this.buffer[1] = this.buffer[2] = 0.0;\n    this.buffer[3] = 1.0;\n\n    return this;\n};\n\nQuat.prototype.copy = function(q)\n{\n    this.buffer[0] = q.buffer[0];\n    this.buffer[1] = q.buffer[1];\n    this.buffer[2] = q.buffer[2];\n    this.buffer[3] = q.buffer[3];\n\n    return this;\n};\n\nQuat.prototype.getAxisAndAngle = function(v3)\n{\n    return Quat.bufferGetAxisAndAngle(v3.buffer, 0, this.buffer, 0);\n};\n\nQuat.prototype.isNull = function()\n{\n    return Quat.bufferIsNull(this.buffer, 0);\n};\n\nQuat.prototype.isIdentity = function()\n{\n    return Quat.bufferIsIdentity(this.buffer, 0);\n};\n\nQuat.prototype.equals = function(q)\n{\n    return Quat.bufferEquals(this.buffer, 0, q.buffer, 0);\n};\n\nQuat.prototype.fastRotationEquals = function(q)\n{\n    //Only valid for unit quaternions or quaternions with the same magnitude\n    return Quat.bufferFastRotationEquals(this.buffer, 0, q.buffer, 0);\n};\n\nQuat.prototype.rotationEquals = function(q)\n{\n    return Quat.bufferRotationEquals(this.buffer, 0, q.buffer, 0);\n};\n\nQuat.prototype.scale = function(scale, q)\n{\n    Quat.bufferScale(this.buffer, 0, scale, q.buffer, 0);\n    return this;\n};\n\nQuat.prototype.scaleInPlace = function(scale)\n{\n    Quat.bufferScaleInPlace(this.buffer, 0, scale);\n    return this;\n};\n\nQuat.prototype.negate = function(q)\n{\n    Quat.bufferNegate(this.buffer, 0, q.buffer, 0);\n    return this;\n};\n\nQuat.prototype.negateInPlace = function()\n{\n    Quat.bufferNegate(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nQuat.prototype.conjugate = function(q)\n{\n    Quat.bufferConjugate(this.buffer, 0, q.buffer, 0);\n    return this;\n};\n\nQuat.prototype.conjugateInPlace = function()\n{\n    Quat.bufferConjugate(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nQuat.prototype.multiply = function(qA, qB)\n{\n    Quat.bufferMultiply(this.buffer, 0, qA.buffer, 0, qB.buffer, 0);\n    return this;\n};\n\nQuat.prototype.multiplyInPlace = function(q)\n{\n    Quat.bufferMultiply(this.buffer, 0, this.buffer, 0, q.buffer, 0);\n    return this;\n};\n\nQuat.prototype.invert = function(q)\n{\n    Quat.bufferInvert(this.buffer, 0, q.buffer, 0);\n    return this;\n};\n\nQuat.prototype.invertInPlace = function()\n{\n    Quat.bufferInvert(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nQuat.prototype.squareNorm = function()\n{\n    return Quat.bufferSquareNorm(this.buffer, 0);\n};\n\nQuat.prototype.norm = function()\n{\n    return Quat.bufferNorm(this.buffer, 0);\n};\n\nQuat.prototype.normalize = function(q)\n{\n    Quat.bufferNormalize(this.buffer, 0, q.buffer, 0);\n    return this;\n};\n\nQuat.prototype.normalizeInPlace = function()\n{\n    Quat.bufferNormalize(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nQuat.prototype.dotProduct = function(q)\n{\n    return Quat.bufferDotProduct(this.buffer, 0, q.buffer, 0);\n};\n\nQuat.prototype.log = function(q)\n{\n    Quat.bufferLog(this.buffer, 0, q.buffer, 0);\n    return this;\n};\n\nQuat.prototype.logInPlace = function()\n{\n    Quat.bufferLog(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nQuat.prototype.exp = function(q)\n{\n    Quat.bufferExp(this.buffer, 0, q.buffer, 0);\n    return this;\n};\n\nQuat.prototype.expInPlace = function()\n{\n    Quat.bufferExp(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nQuat.prototype.pow = function(q, p)\n{\n    Quat.bufferPow(this.buffer, 0, q.buffer, 0, p);\n    return this;\n};\n\nQuat.prototype.powInPlace = function(p)\n{\n    Quat.bufferPow(this.buffer, 0, this.buffer, 0, p);\n    return this;\n};\n\nQuat.prototype.transformVec3 = function(outV3, inV3)\n{\n    //This quaternion must be a unit quaternion\n    Quat.bufferTransformVec3(outV3.buffer, 0, this.buffer, 0, inV3.buffer, 0);\n    return outV3;\n};\n\nQuat.prototype.transformVec3InPlace = function(v3)\n{\n    //This quaternion must be a unit quaternion\n    Quat.bufferTransformVec3(v3.buffer, 0, this.buffer, 0, v3.buffer, 0);\n    return v3;\n};\n\nQuat.prototype.lerp = function(q0, t, q1)\n{\n    Quat.bufferLerp(this.buffer, 0, q0.buffer, 0, t, q1.buffer, 0);\n    return this;\n};\n\nQuat.prototype.slerp = function(q0, t, q1)\n{\n    //q0 and q1 must be unit quaternions\n    Quat.bufferSlerp(this.buffer, 0, q0.buffer, 0, t, q1.buffer, 0);\n    return this;\n};\n\nQuat.prototype.squad = function(s0, q0, t, q1, s1)\n{\n    //s0, q0, q1 and s1 must be unit quaternions\n    Quat.bufferSquad(this.buffer, 0, s0.buffer, 0, q0.buffer, 0, t, q1.buffer, 0, s1.buffer, 0);\n    return this;\n};\n\nQuat.prototype.computeSquadIntermediate = function(q0, q1, q2)\n{\n    //Computes squad intermediate for quaternion q1\n    //q0, q1 and q2 must be unit quaternions\n    //Computed intermediate quaternion is normalized to ensure stability\n    Quat.bufferComputeSquadIntermediate(this.buffer, 0, q0.buffer, 0, q1.buffer, 0, q2.buffer, 0);\n    return this;\n};\n\n//MUST be considered as constants\nQuat.NB_COMPONENTS = 4;\nQuat.IDENTITY = new Quat();\n\nQuat.createBuffer = function(nbElems)\n{\n    nbElems *= 4;\n\n    //Always initialized to 0\n    var buffer = new Float32Array(nbElems);\n\n    for (var i = 3; i < nbElems; i += 4)\n    {\n        buffer[i] = 1.0;\n    }\n\n    return buffer;\n};\n\nQuat.bufferIsNull = Vec4.bufferIsNull;\nQuat.bufferEquals = Vec4.bufferEquals;\nQuat.bufferScale = Vec4.bufferScale;\nQuat.bufferScaleInPlace = Vec4.bufferScaleInPlace;\nQuat.bufferNegate = Vec4.bufferNegate;\nQuat.bufferSquareNorm = Vec4.bufferSquareNorm;\nQuat.bufferNorm = Vec4.bufferNorm;\nQuat.bufferNormalize = Vec4.bufferNormalize;\nQuat.bufferDotProduct = Vec4.bufferDotProduct;\nQuat.bufferLerp = Vec4.bufferLinear;\n\nQuat.bufferSetFromAxisAndAngle = function(outBuffer, outOffset, inV3Buffer, inV3Offset, angle)\n{\n    var x = inV3Buffer[inV3Offset],\n        y = inV3Buffer[inV3Offset + 1],\n        z = inV3Buffer[inV3Offset + 2],\n        n = x * x + y * y + z * z;\n\n    if (n < math.EPSILON2)\n    {\n        //Rotation axis is a null-vector so q is Identity\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n        outBuffer[outOffset + 3] = 1.0;\n        return outBuffer;\n    }\n\n    angle *= 0.5;\n    n = math.sin(angle) / math.sqrt(n);\n\n    outBuffer[outOffset] = x * n;\n    outBuffer[outOffset + 1] = y * n;\n    outBuffer[outOffset + 2] = z * n;\n    outBuffer[outOffset + 3] = math.cos(angle);\n\n    return outBuffer;\n};\n\nQuat.bufferSetFromRotationTo = function(outBuffer, outOffset, inV3StartBuffer, inV3StartOffset, inV3EndBuffer, inV3EndOffset)\n{\n    var x0 = inV3StartBuffer[inV3StartOffset],\n        y0 = inV3StartBuffer[inV3StartOffset + 1],\n        z0 = inV3StartBuffer[inV3StartOffset + 2],\n        n0 = x0 * x0 + y0 * y0 + z0 * z0;\n\n    if (n0 < math.EPSILON2)\n    {\n        //v3Start is a null-vector, thus transformation is the Identity\n        //quaternion\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n        outBuffer[outOffset + 3] = 1.0;\n        return outBuffer;\n    }\n\n    var x1 = inV3EndBuffer[inV3EndOffset],\n        y1 = inV3EndBuffer[inV3EndOffset + 1],\n        z1 = inV3EndBuffer[inV3EndOffset + 2],\n        n1 = x1 * x1 + y1 * y1 + z1 * z1;\n\n    if (n1 < math.EPSILON2)\n    {\n        //v3End is a null-vector, thus transformation is the Identity\n        //quaternion\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n        outBuffer[outOffset + 3] = 1.0;\n        return outBuffer;\n    }\n\n    n0 = 1.0 / math.sqrt(n0);\n    x0 *= n0;\n    y0 *= n0;\n    z0 *= n0;\n\n    n1 = 1.0 / math.sqrt(n1);\n    x1 *= n1;\n    y1 *= n1;\n    z1 *= n1;\n\n    var dot = x0 * x1 + y0 * y1 + z0 * z1,\n        x = 0.0, y = 0.0, z = 0.0;\n\n    if (dot > 1.0 - math.EPSILON)\n    {\n        //Angle between vectors (almost) equals 0, thus transformation is the\n        //Identity quaternion\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n        outBuffer[outOffset + 3] = 1.0;\n        return outBuffer;\n    }\n\n    if (dot < math.EPSILON - 1.0)\n    {\n        //Angle between vectors (almost) equals PI, thus cross product between\n        //vectors is a null-vector, we have to search for the best suitable\n        //perpendicular vector using successively Vec3.I ^ v3Start and\n        //Vec3.J ^ v3Start (no need for Vec3.K ^ v3Start as\n        //Vec3.K = Vec3.I ^ Vec3.J)\n        y = -z0;\n        z = y0;\n        n0 = y * y + z * z;\n\n        if (n0 < math.EPSILON2)\n        {\n            x = z0;\n            y = 0.0;\n            z = -x0;\n            n0 = x * x + z * z;\n        }\n\n        n0 = 1.0 / math.sqrt(n0);\n        outBuffer[outOffset] = x * n0;\n        outBuffer[outOffset + 1] = y * n0;\n        outBuffer[outOffset + 2] = z * n0;\n        outBuffer[outOffset + 3] = 0.0;\n\n        return outBuffer;\n    }\n\n    //-1 < dot < 1, so angle 'a' between vectors is such as: 0 < a < PI, thus\n    //cross product between vectors is not a null-vector but the right rotation\n    //axis\n    x = y0 * z1 - z0 * y1;\n    y = z0 * x1 - x0 * z1;\n    z = x0 * y1 - y0 * x1;\n    dot += 1.0;\n\n    n0 = 1.0 / math.sqrt(x * x + y * y + z * z + dot * dot);\n    outBuffer[outOffset] = x * n0;\n    outBuffer[outOffset + 1] = y * n0;\n    outBuffer[outOffset + 2] = z * n0;\n    outBuffer[outOffset + 3] = dot * n0;\n\n    return outBuffer;\n};\n\nQuat.bufferSetFromRotationMat3 = function(outBuffer, outOffset, inM3Buffer, inM3Offset)\n{\n    //m3 must be a pure 3x3 rotation matrix\n    var trace = inM3Buffer[inM3Offset] + inM3Buffer[inM3Offset + 4] + inM3Buffer[inM3Offset + 8],\n        f = 0.0;\n\n    if (trace > 0.0)\n    {\n        f = math.sqrt(trace + 1.0);\n        outBuffer[outOffset + 3] = 0.5 * f;\n\n        f = 0.5 / f;\n        outBuffer[outOffset] = (inM3Buffer[inM3Offset + 5] - inM3Buffer[inM3Offset + 7]) * f;\n        outBuffer[outOffset + 1] = (inM3Buffer[inM3Offset + 6] - inM3Buffer[inM3Offset + 2]) * f;\n        outBuffer[outOffset + 2] = (inM3Buffer[inM3Offset + 1] - inM3Buffer[inM3Offset + 3]) * f;\n    }\n    else\n    {\n        var i = 0;\n        if (inM3Buffer[inM3Offset + 4] > inM3Buffer[inM3Offset])\n        {\n            i = 1;\n        }\n\n        if (inM3Buffer[inM3Offset + 8] > inM3Buffer[inM3Offset + 4 * i])\n        {\n            i = 2;\n        }\n\n        var j = (i + 1) % 3,\n            k = (i + 2) % 3;\n\n        f = math.sqrt(inM3Buffer[inM3Offset + 4 * i] - inM3Buffer[inM3Offset + 4 * j] - inM3Buffer[inM3Offset + 4 * k] + 1.0);\n        outBuffer[outOffset + i] = 0.5 * f;\n\n        f = 0.5 / f;\n        outBuffer[outOffset + 3] = (inM3Buffer[inM3Offset + 3 * j + k] - inM3Buffer[inM3Offset + 3 * k + j]) * f;\n        outBuffer[outOffset + j] = (inM3Buffer[inM3Offset + 3 * j + i] + inM3Buffer[inM3Offset + 3 * i + j]) * f;\n        outBuffer[outOffset + k] = (inM3Buffer[inM3Offset + 3 * k + i] + inM3Buffer[inM3Offset + 3 * i + k]) * f;\n    }\n\n    return Quat.bufferNormalize(outBuffer, outOffset, outBuffer, outOffset);\n};\n\nQuat.bufferSetFromRotationMat4 = function(outBuffer, outOffset, inM4Buffer, inM4Offset)\n{\n    //m4 upper-left 3x3 sub-matrix must be a pure rotation matrix\n    var trace = inM4Buffer[inM4Offset] + inM4Buffer[inM4Offset + 5] + inM4Buffer[inM4Offset + 10],\n        f = 0.0;\n\n    if (trace > 0.0)\n    {\n        f = math.sqrt(trace + 1.0);\n        outBuffer[outOffset + 3] = 0.5 * f;\n\n        f = 0.5 / f;\n        outBuffer[outOffset] = (inM4Buffer[inM4Offset + 6] - inM4Buffer[inM4Offset + 9]) * f;\n        outBuffer[outOffset + 1] = (inM4Buffer[inM4Offset + 8] - inM4Buffer[inM4Offset + 2]) * f;\n        outBuffer[outOffset + 2] = (inM4Buffer[inM4Offset + 1] - inM4Buffer[inM4Offset + 4]) * f;\n    }\n    else\n    {\n        var i = 0;\n        if (inM4Buffer[inM4Offset + 5] > inM4Buffer[inM4Offset])\n        {\n            i = 1;\n        }\n\n        if (inM4Buffer[inM4Offset + 10] > inM4Buffer[inM4Offset + 5 * i])\n        {\n            i = 2;\n        }\n\n        var j = (i + 1) % 3,\n            k = (i + 2) % 3;\n\n        f = math.sqrt(inM4Buffer[inM4Offset + 5 * i] - inM4Buffer[inM4Offset + 5 * j] - inM4Buffer[inM4Offset + 5 * k] + 1.0);\n        outBuffer[outOffset + i] = 0.5 * f;\n\n        f = 0.5 / f;\n        outBuffer[outOffset + 3] = (inM4Buffer[inM4Offset + 4 * j + k] - inM4Buffer[inM4Offset + 4 * k + j]) * f;\n        outBuffer[outOffset + j] = (inM4Buffer[inM4Offset + 4 * j + i] + inM4Buffer[inM4Offset + 4 * i + j]) * f;\n        outBuffer[outOffset + k] = (inM4Buffer[inM4Offset + 4 * k + i] + inM4Buffer[inM4Offset + 4 * i + k]) * f;\n    }\n\n    return Quat.bufferNormalize(outBuffer, outOffset, outBuffer, outOffset);\n};\n\nQuat.bufferGetAxisAndAngle = function(outV3Buffer, outV3Offset, inBuffer, inOffset)\n{\n    //This computes the angle and axis of the rotation that is represented by\n    //the inBuffer quaternion if it were a unit quaternion.\n    //With û the 3D unit vector defining the rotation axis and 'a' the angle\n    //around this axis, we compute 'a' and û such as:\n    //q == ||q||.[cos(a/2) + sin(a/2).û]\n    //So, if the former quaternion is not a unit quaternion, it should be\n    //normalized before using it in other computations else the returned axis\n    //and angle will not correspond.\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        z = inBuffer[inOffset + 2],\n        w = inBuffer[inOffset + 3],\n        m = x * x + y * y + z * z;\n\n    if (m < math.EPSILON2)\n    {\n        //q is a null-quaternion or sin(a/2) == 0\n        if (math.abs(w) < math.EPSILON)\n        {\n            //q is a null-quaternion, thus it cannot represent a rotation\n            outV3Buffer[outV3Offset] = outV3Buffer[outV3Offset + 1] = outV3Buffer[outV3Offset + 2] = 0.0;\n            return 0.0;\n        }\n        else\n        {\n            //Rotation angle 'a' equals 0 or 2.PI with a rotation axis that may\n            //be anything. We choose arbitrarily û = [1, 0, 0]\n            outV3Buffer[outV3Offset] = 1.0;\n            outV3Buffer[outV3Offset + 1] = outV3Buffer[outV3Offset + 2] = 0.0;\n\n            return (w > 0.0) ? 0.0 : math.TWO_PI;\n        }\n    }\n\n    m = math.sqrt(m);\n    var theta = math.atan2(m, w); //More stable than acos(w / ||q||)\n\n    m = 1.0 / m;\n    outV3Buffer[outV3Offset] = x * m;\n    outV3Buffer[outV3Offset + 1] = y * m;\n    outV3Buffer[outV3Offset + 2] = z * m;\n\n    return 2.0 * theta;\n};\n\nQuat.bufferIsIdentity = function(inBuffer, inOffset)\n{\n    return ((math.abs(inBuffer[inOffset]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 1]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 2]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 3] - 1.0) < math.EPSILON));\n};\n\nQuat.bufferFastRotationEquals = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    //Only valid for unit quaternions or quaternions with the same magnitude\n    var xa = inBufferA[inOffsetA],\n        ya = inBufferA[inOffsetA + 1],\n        za = inBufferA[inOffsetA + 2],\n        wa = inBufferA[inOffsetA + 3];\n\n    if ((inBufferA === inBufferB) && (inOffsetA === inOffsetB))\n    {\n        return !((math.abs(xa) < math.EPSILON) &&\n            (math.abs(ya) < math.EPSILON) &&\n            (math.abs(za) < math.EPSILON) &&\n            (math.abs(wa) < math.EPSILON));\n    }\n\n    var xb = inBufferB[inOffsetB],\n        yb = inBufferB[inOffsetB + 1],\n        zb = inBufferB[inOffsetB + 2],\n        wb = inBufferB[inOffsetB + 3];\n\n    return (((math.abs(xa) >= math.EPSILON) ||\n        (math.abs(ya) >= math.EPSILON) ||\n        (math.abs(za) >= math.EPSILON) ||\n        (math.abs(wa) >= math.EPSILON)) &&\n        ((math.abs(xb) >= math.EPSILON) ||\n            (math.abs(yb) >= math.EPSILON) ||\n            (math.abs(zb) >= math.EPSILON) ||\n            (math.abs(wb) >= math.EPSILON)) &&\n        (((math.abs(xb - xa) < math.EPSILON) &&\n            (math.abs(yb - ya) < math.EPSILON) &&\n            (math.abs(zb - za) < math.EPSILON) &&\n            (math.abs(wb - wa) < math.EPSILON)) ||\n            ((math.abs(xb + xa) < math.EPSILON) &&\n                (math.abs(yb + ya) < math.EPSILON) &&\n                (math.abs(zb + za) < math.EPSILON) &&\n                (math.abs(wb + wa) < math.EPSILON))));\n};\n\nQuat.bufferRotationEquals = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var xa = inBufferA[inOffsetA],\n        ya = inBufferA[inOffsetA + 1],\n        za = inBufferA[inOffsetA + 2],\n        wa = inBufferA[inOffsetA + 3];\n\n    if ((inBufferA === inBufferB) && (inOffsetA === inOffsetB))\n    {\n        return !((math.abs(xa) < math.EPSILON) &&\n            (math.abs(ya) < math.EPSILON) &&\n            (math.abs(za) < math.EPSILON) &&\n            (math.abs(wa) < math.EPSILON));\n    }\n\n    var na = xa * xa + ya * ya + za * za + wa * wa;\n    if (na < math.EPSILON2)\n    {\n        return false;\n    }\n\n    var xb = inBufferB[inOffsetB],\n        yb = inBufferB[inOffsetB + 1],\n        zb = inBufferB[inOffsetB + 2],\n        wb = inBufferB[inOffsetB + 3],\n        nb = xb * xb + yb * yb + zb * zb + wb * wb;\n\n    if (nb < math.EPSILON2)\n    {\n        return false;\n    }\n\n    var dot = math.abs(xa * xb + ya * yb + za * zb + wa * wb);\n    if (dot < math.EPSILON)\n    {\n        return false;\n    }\n\n    dot /= math.sqrt(na * nb);\n    if (dot <= 1.0 - math.EPSILON)\n    {\n        return false;\n    }\n\n    return true;\n};\n\nQuat.bufferConjugate = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    outBuffer[outOffset] = -inBuffer[inOffset];\n    outBuffer[outOffset + 1] = -inBuffer[inOffset + 1];\n    outBuffer[outOffset + 2] = -inBuffer[inOffset + 2];\n    outBuffer[outOffset + 3] = inBuffer[inOffset + 3];\n\n    return outBuffer;\n};\n\nQuat.bufferMultiply = function(outBuffer, outOffset, inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var xa = inBufferA[inOffsetA],\n        ya = inBufferA[inOffsetA + 1],\n        za = inBufferA[inOffsetA + 2],\n        wa = inBufferA[inOffsetA + 3],\n        xb = inBufferB[inOffsetB],\n        yb = inBufferB[inOffsetB + 1],\n        zb = inBufferB[inOffsetB + 2],\n        wb = inBufferB[inOffsetB + 3];\n\n    outBuffer[outOffset] = wa * xb + wb * xa + ya * zb - yb * za;\n    outBuffer[outOffset + 1] = wa * yb + wb * ya + za * xb - zb * xa;\n    outBuffer[outOffset + 2] = wa * zb + wb * za + xa * yb - xb * ya;\n    outBuffer[outOffset + 3] = wa * wb - xa * xb - ya * yb - za * zb;\n\n    return outBuffer;\n};\n\nQuat.bufferInvert = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        z = inBuffer[inOffset + 2],\n        w = inBuffer[inOffset + 3],\n        n = x * x + y * y + z * z + w * w;\n\n    if (n < math.EPSILON2)\n    {\n        //q is a null-quaternion, thus a real number and 1 / 0 == +/-Infinity\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n        outBuffer[outOffset + 3] = (w >= 0.0) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n        return outBuffer;\n    }\n\n    n = 1.0 / n;\n    outBuffer[outOffset] = -x * n;\n    outBuffer[outOffset + 1] = -y * n;\n    outBuffer[outOffset + 2] = -z * n;\n    outBuffer[outOffset + 3] = w * n;\n\n    return outBuffer;\n};\n\nQuat.bufferLog = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    //With û a 3D unit vector,\n    //q = ||q||.[cos(theta) + sin(theta).û]\n    //q = ||q||.exp(theta.û)\n    //log(q) = log(||q||) + theta.û\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        z = inBuffer[inOffset + 2],\n        w = inBuffer[inOffset + 3],\n        m = x * x + y * y + z * z;\n\n    if (m < math.EPSILON2)\n    {\n        //q is a null-quaternion or sin(theta) == 0\n        if (w > 0.0)\n        {\n            //Theta equals 0\n            outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n            outBuffer[outOffset + 3] = math.log(w);\n        }\n        else if (w < 0.0)\n        {\n            //Theta equals PI and the vector part of the quaternion may be\n            //anything, we choose arbitrarily û = [1, 0, 0]\n            outBuffer[outOffset] = math.PI;\n            outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n            outBuffer[outOffset + 3] = math.log(-w);\n        }\n        else\n        {\n            //q is a null-quaternion, thus a real number and log(0) == -Infinity\n            outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n            outBuffer[outOffset + 3] = Number.NEGATIVE_INFINITY;\n        }\n\n        return outBuffer;\n    }\n\n    var n2 = m + w * w;\n    m = math.sqrt(m);\n    var theta = math.atan2(m, w); //More stable than acos(w / ||q||)\n    theta /= m;\n\n    outBuffer[outOffset] = x * theta;\n    outBuffer[outOffset + 1] = y * theta;\n    outBuffer[outOffset + 2] = z * theta;\n    outBuffer[outOffset + 3] = 0.5 * math.log(n2);\n\n    return outBuffer;\n};\n\nQuat.bufferExp = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    //With û a 3D unit vector,\n    //q = ||q||.[cos(theta) + sin(theta).û]\n    //exp(q) = exp[||q||.cos(theta)] x exp[||q||.sin(theta).û]\n    //exp(q) = exp[||q||.cos(theta)] x {cos[||q||.sin(theta)] + sin[||q||.sin(theta)].û}\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        z = inBuffer[inOffset + 2],\n        expW = math.exp(inBuffer[inOffset + 3]),\n        m = x * x + y * y + z * z;\n\n    if (m < math.EPSILON2)\n    {\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n        outBuffer[outOffset + 3] = expW;\n        return outBuffer;\n    }\n\n    m = math.sqrt(m);\n    outBuffer[outOffset + 3] = expW * math.cos(m);\n\n    m = expW * math.sin(m) / m;\n    outBuffer[outOffset] = x * m;\n    outBuffer[outOffset + 1] = y * m;\n    outBuffer[outOffset + 2] = z * m;\n\n    return outBuffer;\n};\n\nQuat.bufferPow = function(outBuffer, outOffset, inBuffer, inOffset, p)\n{\n    //With û a 3D unit vector,\n    //q = ||q||.exp(theta.û)\n    //pow(q, p) = pow(||q||, p).exp(p.theta.û)\n    //pow(q, p) = pow(||q||, p).[cos(p.theta) + sin(p.theta).û]\n    if (math.abs(p) < math.EPSILON)\n    {\n        //pow(q, 0) == Identity\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n        outBuffer[outOffset + 3] = 1.0;\n        return outBuffer;\n    }\n\n    if (math.abs(p - 1.0) < math.EPSILON2)\n    {\n        //pow(q, 1) == q\n        outBuffer[outOffset] = inBuffer[inOffset];\n        outBuffer[outOffset + 1] = inBuffer[inOffset + 1];\n        outBuffer[outOffset + 2] = inBuffer[inOffset + 2];\n        outBuffer[outOffset + 3] = inBuffer[inOffset + 3];\n\n        return outBuffer;\n    }\n\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        z = inBuffer[inOffset + 2],\n        w = inBuffer[inOffset + 3],\n        m = x * x + y * y + z * z;\n\n    if (m < math.EPSILON2)\n    {\n        //q is a null-quaternion or sin(theta) == 0\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n\n        if (math.abs(w) < math.EPSILON)\n        {\n            //q is a null-quaternion, thus a real number and pow(0, p) == 0\n            outBuffer[outOffset + 3] = 0.0;\n        }\n        else\n        {\n            //Theta equals 0 or PI\n            outBuffer[outOffset + 3] = math.pow(w, p);\n        }\n\n        return outBuffer;\n    }\n\n    var n = math.pow(m + w * w, 0.5 * p);\n    m = math.sqrt(m);\n\n    var theta = math.atan2(m, w); //More stable than acos(w / ||q||)\n    theta *= p;\n\n    outBuffer[outOffset + 3] = n * math.cos(theta);\n    theta = n * math.sin(theta) / m;\n\n    outBuffer[outOffset] = x * theta;\n    outBuffer[outOffset + 1] = y * theta;\n    outBuffer[outOffset + 2] = z * theta;\n\n    return outBuffer;\n};\n\nQuat.bufferTransformVec3 = function(outV3Buffer, outV3Offset, inQBuffer, inQOffset, inV3Buffer, inV3Offset)\n{\n    //q quaternion must be a unit quaternion\n    //outV3 = q.inV3.inv(q)\n    //outV3 = q.inV3.(conj(q) / ||q||²)\n    //outV3 = q.inV3.conj(q) because unit quaternion\n    var vx = inV3Buffer[inV3Offset],\n        vy = inV3Buffer[inV3Offset + 1],\n        vz = inV3Buffer[inV3Offset + 2],\n        qx = inQBuffer[inQOffset],\n        qy = inQBuffer[inQOffset + 1],\n        qz = inQBuffer[inQOffset + 2],\n        qw = inQBuffer[inQOffset + 3],\n        rx = qw * vx - vy * qz + qy * vz, //r = inV3.conj(q)\n        ry = qw * vy - vz * qx + qz * vx,\n        rz = qw * vz - vx * qy + qx * vy,\n        rw = vx * qx + vy * qy + vz * qz;\n\n    //outV3 = q.r\n    outV3Buffer[outV3Offset] = qw * rx + rw * qx + qy * rz - ry * qz;\n    outV3Buffer[outV3Offset + 1] = qw * ry + rw * qy + qz * rx - rz * qx;\n    outV3Buffer[outV3Offset + 2] = qw * rz + rw * qz + qx * ry - rx * qy;\n\n    return outV3Buffer;\n};\n\nQuat.bufferSlerp = function(outBuffer, outOffset, inBufferQ0, inOffsetQ0, t, inBufferQ1, inOffsetQ1)\n{\n    //q0 and q1 must be unit quaternions\n    //q(t) = {sin[(1 - t).theta] / sin(theta)}.q0 + [sin(t.theta) / sin(theta)].q1\n    //with cos(theta) = q0.q1 / ||q0||.||q1|| = q0.q1 because unit quaternions\n    var x0 = inBufferQ0[inOffsetQ0],\n        y0 = inBufferQ0[inOffsetQ0 + 1],\n        z0 = inBufferQ0[inOffsetQ0 + 2],\n        w0 = inBufferQ0[inOffsetQ0 + 3],\n        x1 = inBufferQ1[inOffsetQ1],\n        y1 = inBufferQ1[inOffsetQ1 + 1],\n        z1 = inBufferQ1[inOffsetQ1 + 2],\n        w1 = inBufferQ1[inOffsetQ1 + 3],\n        dot = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1;\n\n    if (dot < 0.0)\n    {\n        //Let's interpolate along the shortest path\n        dot = -dot;\n        x1 = -x1;\n        y1 = -y1;\n        z1 = -z1;\n        w1 = -w1;\n    }\n\n    if (dot > 1.0 - math.EPSILON)\n    {\n        //Angle theta (almost) equals 0 so 1/sin(theta) will overflow.\n        //We fallback doing a simple linear interpolation as the difference\n        //between q0 and q1 is very small\n        outBuffer[outOffset] = x0 + t * (x1 - x0);\n        outBuffer[outOffset + 1] = y0 + t * (y1 - y0);\n        outBuffer[outOffset + 2] = z0 + t * (z1 - z0);\n        outBuffer[outOffset + 3] = w0 + t * (w1 - w0);\n\n        return outBuffer;\n    }\n\n    dot = math.acos(dot);\n    var invSin = 1.0 / math.sin(dot),\n        s = math.sin((1.0 - t) * dot) * invSin;\n    t = math.sin(t * dot) * invSin;\n\n    outBuffer[outOffset] = s * x0 + t * x1;\n    outBuffer[outOffset + 1] = s * y0 + t * y1;\n    outBuffer[outOffset + 2] = s * z0 + t * z1;\n    outBuffer[outOffset + 3] = s * w0 + t * w1;\n\n    return outBuffer;\n};\n\n//It is safe to use a \"statically\" shared temporary buffer for bufferSquad\n//and bufferComputeSquadIntermediate because web workers never share their\n//global contexts, so _sharedTmpBuffer will never be accessed from\n//different threads\nvar _sharedTmpBuffer = new Float32Array(8);\n\nQuat.bufferSquad = function(outBuffer, outOffset, inBufferS0, inOffsetS0, inBufferQ0, inOffsetQ0, t, inBufferQ1, inOffsetQ1, inBufferS1, inOffsetS1)\n{\n    //s0, q0, q1 and s1 must be unit quaternions\n    //squad(s0, q0, t, q1, s1) = slerp[slerp(q0, t, q1), 2t(1 - t), slerp(s0, t, s1)]\n    //with:\n    //s0 = exp{-1/4 x [log(q1.inv(q0)) + log(q-1.inv(q0))]}.q0\n    //s1 = exp{-1/4 x [log(q2.inv(q1)) + log(q0.inv(q1))]}.q1\n    //s0 and s1 can be computed using bufferComputeSquadIntermediate\n\n    Quat.bufferSlerp(_sharedTmpBuffer, 0, inBufferS0, inOffsetS0, t, inBufferS1, inOffsetS1);\n    Quat.bufferSlerp(outBuffer, outOffset, inBufferQ0, inOffsetQ0, t, inBufferQ1, inOffsetQ1);\n    Quat.bufferSlerp(outBuffer, outOffset, outBuffer, outOffset, 2.0 * t * (1.0 - t), _sharedTmpBuffer, 0);\n\n    return outBuffer;\n};\n\nQuat.bufferComputeSquadIntermediate = function(outBuffer, outOffset, inBufferQ0, inOffsetQ0, inBufferQ1, inOffsetQ1, inBufferQ2, inOffsetQ2)\n{\n    //Computes squad intermediate for quaternion q1\n    //q0, q1 and q2 must be unit quaternions\n    //Computed intermediate quaternion is normalized to ensure stability\n    //s1 = exp{-1/4 x [log(q2.inv(q1)) + log(q0.inv(q1))]}.q1\n    Quat.bufferInvert(_sharedTmpBuffer, 4, inBufferQ1, inOffsetQ1);\n\n    Quat.bufferMultiply(_sharedTmpBuffer, 0, inBufferQ2, inOffsetQ2, _sharedTmpBuffer, 4);\n    Quat.bufferLog(_sharedTmpBuffer, 0, _sharedTmpBuffer, 0);\n\n    Quat.bufferMultiply(_sharedTmpBuffer, 4, inBufferQ0, inOffsetQ0, _sharedTmpBuffer, 4);\n    Quat.bufferLog(_sharedTmpBuffer, 4, _sharedTmpBuffer, 4);\n\n    _sharedTmpBuffer[0] = -0.25 * (_sharedTmpBuffer[0] + _sharedTmpBuffer[4]);\n    _sharedTmpBuffer[1] = -0.25 * (_sharedTmpBuffer[1] + _sharedTmpBuffer[5]);\n    _sharedTmpBuffer[2] = -0.25 * (_sharedTmpBuffer[2] + _sharedTmpBuffer[6]);\n    _sharedTmpBuffer[3] = -0.25 * (_sharedTmpBuffer[3] + _sharedTmpBuffer[7]);\n\n    Quat.bufferExp(_sharedTmpBuffer, 0, _sharedTmpBuffer, 0);\n    Quat.bufferMultiply(outBuffer, outOffset, _sharedTmpBuffer, 0, inBufferQ1, inOffsetQ1);\n\n    Quat.bufferNormalize(outBuffer, outOffset, outBuffer, outOffset);\n    return outBuffer;\n};\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar math = require(\"./math\");\n\nvar Vec4 = module.exports = function()\n{\n    //Always initialized to 0\n    this.buffer = new Float32Array(4);\n};\n\nVec4.prototype.setFromValues = function(x, y, z, w)\n{\n    this.buffer[0] = x;\n    this.buffer[1] = y;\n    this.buffer[2] = z;\n    this.buffer[3] = w;\n\n    return this;\n};\n\nVec4.prototype.setFromArray = function(arr)\n{\n    this.buffer[0] = arr[0];\n    this.buffer[1] = arr[1];\n    this.buffer[2] = arr[2];\n    this.buffer[3] = arr[3];\n\n    return this;\n};\n\nVec4.prototype.setFromVec3Pos = function(v3)\n{\n    this.buffer[0] = v3.buffer[0];\n    this.buffer[1] = v3.buffer[1];\n    this.buffer[2] = v3.buffer[2];\n    this.buffer[3] = 1.0;\n\n    return this;\n};\n\nVec4.prototype.setFromVec3Dir = function(v3)\n{\n    this.buffer[0] = v3.buffer[0];\n    this.buffer[1] = v3.buffer[1];\n    this.buffer[2] = v3.buffer[2];\n    this.buffer[3] = 0.0;\n\n    return this;\n};\n\nVec4.prototype.setNull = function()\n{\n    this.buffer[0] = this.buffer[1] = this.buffer[2] = this.buffer[3] = 0.0;\n    return this;\n};\n\nVec4.prototype.setOne = function()\n{\n    this.buffer[0] = this.buffer[1] = this.buffer[2] = this.buffer[3] = 1.0;\n    return this;\n};\n\nVec4.prototype.copy = function(v4)\n{\n    this.buffer[0] = v4.buffer[0];\n    this.buffer[1] = v4.buffer[1];\n    this.buffer[2] = v4.buffer[2];\n    this.buffer[3] = v4.buffer[3];\n\n    return this;\n};\n\nVec4.prototype.isNull = function()\n{\n    return Vec4.bufferIsNull(this.buffer, 0);\n};\n\nVec4.prototype.equals = function(v4)\n{\n    return Vec4.bufferEquals(this.buffer, 0, v4.buffer, 0);\n};\n\nVec4.prototype.add = function(v4A, v4B)\n{\n    Vec4.bufferAdd(this.buffer, 0, v4A.buffer, 0, v4B.buffer, 0);\n    return this;\n};\n\nVec4.prototype.addInPlace = function(v4)\n{\n    Vec4.bufferAddInPlace(this.buffer, 0, v4.buffer, 0);\n    return this;\n};\n\nVec4.prototype.substract = function(v4A, v4B)\n{\n    Vec4.bufferSubstract(this.buffer, 0, v4A.buffer, 0, v4B.buffer, 0);\n    return this;\n};\n\nVec4.prototype.substractInPlace = function(v4)\n{\n    Vec4.bufferSubstractInPlace(this.buffer, 0, v4.buffer, 0);\n    return this;\n};\n\nVec4.prototype.scale = function(scale, v4)\n{\n    Vec4.bufferScale(this.buffer, 0, scale, v4.buffer, 0);\n    return this;\n};\n\nVec4.prototype.scaleInPlace = function(scale)\n{\n    Vec4.bufferScaleInPlace(this.buffer, 0, scale);\n    return this;\n};\n\nVec4.prototype.addScaled = function(v4A, scale, v4B)\n{\n    Vec4.bufferAddScaled(this.buffer, 0, v4A.buffer, 0, scale, v4B.buffer, 0);\n    return this;\n};\n\nVec4.prototype.addScaledInPlace = function(scale, v4)\n{\n    Vec4.bufferAddScaledInPlace(this.buffer, 0, scale, v4.buffer, 0);\n    return this;\n};\n\nVec4.prototype.negate = function(v4)\n{\n    Vec4.bufferNegate(this.buffer, 0, v4.buffer, 0);\n    return this;\n};\n\nVec4.prototype.negateInPlace = function()\n{\n    Vec4.bufferNegate(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nVec4.prototype.squareDistance = function(v4)\n{\n    return Vec4.bufferSquareDistance(this.buffer, 0, v4.buffer, 0);\n};\n\nVec4.prototype.distance = function(v4)\n{\n    return Vec4.bufferDistance(this.buffer, 0, v4.buffer, 0);\n};\n\nVec4.prototype.squareNorm = function()\n{\n    return Vec4.bufferSquareNorm(this.buffer, 0);\n};\n\nVec4.prototype.norm = function()\n{\n    return Vec4.bufferNorm(this.buffer, 0);\n};\n\nVec4.prototype.normalize = function(v4)\n{\n    Vec4.bufferNormalize(this.buffer, 0, v4.buffer, 0);\n    return this;\n};\n\nVec4.prototype.normalizeInPlace = function()\n{\n    Vec4.bufferNormalize(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nVec4.prototype.dotProduct = function(v4)\n{\n    return Vec4.bufferDotProduct(this.buffer, 0, v4.buffer, 0);\n};\n\nVec4.prototype.linear = function(p0, t, p1)\n{\n    Vec4.bufferLinear(this.buffer, 0, p0.buffer, 0, t, p1.buffer, 0);\n    return this;\n};\n\nVec4.prototype.quadratic = function(p0, p1, t, p2)\n{\n    Vec4.bufferQuadratic(this.buffer, 0, p0.buffer, 0, p1.buffer, 0, t, p2.buffer, 0);\n    return this;\n};\n\nVec4.prototype.hermite = function(tan0, p0, t, p1, tan1)\n{\n    Vec4.bufferHermite(this.buffer, 0, tan0.buffer, 0, p0.buffer, 0, t, p1.buffer, 0, tan1.buffer, 0);\n    return this;\n};\n\nVec4.prototype.bezier = function(ctrl0, p0, t, p1, ctrl1)\n{\n    Vec4.bufferBezier(this.buffer, 0, ctrl0.buffer, 0, p0.buffer, 0, t, p1.buffer, 0, ctrl1.buffer, 0);\n    return this;\n};\n\nVec4.prototype.catmullRom = function(p0, p1, t, p2, p3)\n{\n    Vec4.bufferCatmullRom(this.buffer, 0, p0.buffer, 0, p1.buffer, 0, t, p2.buffer, 0, p3.buffer, 0);\n    return this;\n};\n\n//MUST be considered as constants\nVec4.NB_COMPONENTS = 4;\nVec4.I = new Vec4().setFromValues(1.0, 0.0, 0.0, 0.0);\nVec4.J = new Vec4().setFromValues(0.0, 1.0, 0.0, 0.0);\nVec4.K = new Vec4().setFromValues(0.0, 0.0, 1.0, 0.0);\nVec4.L = new Vec4().setFromValues(0.0, 0.0, 0.0, 1.0);\n\nVec4.createBuffer = function(nbElems)\n{\n    //Always initialized to 0\n    return new Float32Array(4 * nbElems);\n};\n\nVec4.bufferIsNull = function(inBuffer, inOffset)\n{\n    return ((math.abs(inBuffer[inOffset]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 1]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 2]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 3]) < math.EPSILON));\n};\n\nVec4.bufferEquals = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    return (((inBufferA === inBufferB) && (inOffsetA === inOffsetB)) ||\n        ((math.abs(inBufferB[inOffsetB] - inBufferA[inOffsetA]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 2] - inBufferA[inOffsetA + 2]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 3] - inBufferA[inOffsetA + 3]) < math.EPSILON)));\n};\n\nVec4.bufferAdd = function(outBuffer, outOffset, inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    outBuffer[outOffset] = inBufferA[inOffsetA] + inBufferB[inOffsetB];\n    outBuffer[outOffset + 1] = inBufferA[inOffsetA + 1] + inBufferB[inOffsetB + 1];\n    outBuffer[outOffset + 2] = inBufferA[inOffsetA + 2] + inBufferB[inOffsetB + 2];\n    outBuffer[outOffset + 3] = inBufferA[inOffsetA + 3] + inBufferB[inOffsetB + 3];\n\n    return outBuffer;\n};\n\nVec4.bufferAddInPlace = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    outBuffer[outOffset] += inBuffer[inOffset];\n    outBuffer[outOffset + 1] += inBuffer[inOffset + 1];\n    outBuffer[outOffset + 2] += inBuffer[inOffset + 2];\n    outBuffer[outOffset + 3] += inBuffer[inOffset + 3];\n\n    return outBuffer;\n};\n\nVec4.bufferSubstract = function(outBuffer, outOffset, inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    outBuffer[outOffset] = inBufferA[inOffsetA] - inBufferB[inOffsetB];\n    outBuffer[outOffset + 1] = inBufferA[inOffsetA + 1] - inBufferB[inOffsetB + 1];\n    outBuffer[outOffset + 2] = inBufferA[inOffsetA + 2] - inBufferB[inOffsetB + 2];\n    outBuffer[outOffset + 3] = inBufferA[inOffsetA + 3] - inBufferB[inOffsetB + 3];\n\n    return outBuffer;\n};\n\nVec4.bufferSubstractInPlace = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    outBuffer[outOffset] -= inBuffer[inOffset];\n    outBuffer[outOffset + 1] -= inBuffer[inOffset + 1];\n    outBuffer[outOffset + 2] -= inBuffer[inOffset + 2];\n    outBuffer[outOffset + 3] -= inBuffer[inOffset + 3];\n\n    return outBuffer;\n};\n\nVec4.bufferScale = function(outBuffer, outOffset, scale, inBuffer, inOffset)\n{\n    outBuffer[outOffset] = scale * inBuffer[inOffset];\n    outBuffer[outOffset + 1] = scale * inBuffer[inOffset + 1];\n    outBuffer[outOffset + 2] = scale * inBuffer[inOffset + 2];\n    outBuffer[outOffset + 3] = scale * inBuffer[inOffset + 3];\n\n    return outBuffer;\n};\n\nVec4.bufferScaleInPlace = function(outBuffer, outOffset, scale)\n{\n    outBuffer[outOffset] *= scale;\n    outBuffer[outOffset + 1] *= scale;\n    outBuffer[outOffset + 2] *= scale;\n    outBuffer[outOffset + 3] *= scale;\n\n    return outBuffer;\n};\n\nVec4.bufferAddScaled = function(outBuffer, outOffset, inBufferA, inOffsetA, scale, inBufferB, inOffsetB)\n{\n    outBuffer[outOffset] = inBufferA[inOffsetA] + scale * inBufferB[inOffsetB];\n    outBuffer[outOffset + 1] = inBufferA[inOffsetA + 1] + scale * inBufferB[inOffsetB + 1];\n    outBuffer[outOffset + 2] = inBufferA[inOffsetA + 2] + scale * inBufferB[inOffsetB + 2];\n    outBuffer[outOffset + 3] = inBufferA[inOffsetA + 3] + scale * inBufferB[inOffsetB + 3];\n\n    return outBuffer;\n};\n\nVec4.bufferAddScaledInPlace = function(outBuffer, outOffset, scale, inBuffer, inOffset)\n{\n    outBuffer[outOffset] += scale * inBuffer[inOffset];\n    outBuffer[outOffset + 1] += scale * inBuffer[inOffset + 1];\n    outBuffer[outOffset + 2] += scale * inBuffer[inOffset + 2];\n    outBuffer[outOffset + 3] += scale * inBuffer[inOffset + 3];\n\n    return outBuffer;\n};\n\nVec4.bufferNegate = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    outBuffer[outOffset] = -inBuffer[inOffset];\n    outBuffer[outOffset + 1] = -inBuffer[inOffset + 1];\n    outBuffer[outOffset + 2] = -inBuffer[inOffset + 2];\n    outBuffer[outOffset + 3] = -inBuffer[inOffset + 3];\n\n    return outBuffer;\n};\n\nVec4.bufferSquareDistance = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var x = inBufferB[inOffsetB] - inBufferA[inOffsetA],\n        y = inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1],\n        z = inBufferB[inOffsetB + 2] - inBufferA[inOffsetA + 2],\n        w = inBufferB[inOffsetB + 3] - inBufferA[inOffsetA + 3];\n\n    return x * x + y * y + z * z + w * w;\n};\n\nVec4.bufferDistance = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var x = inBufferB[inOffsetB] - inBufferA[inOffsetA],\n        y = inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1],\n        z = inBufferB[inOffsetB + 2] - inBufferA[inOffsetA + 2],\n        w = inBufferB[inOffsetB + 3] - inBufferA[inOffsetA + 3];\n\n    return math.sqrt(x * x + y * y + z * z + w * w);\n};\n\nVec4.bufferSquareNorm = function(inBuffer, inOffset)\n{\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        z = inBuffer[inOffset + 2],\n        w = inBuffer[inOffset + 3];\n\n    return x * x + y * y + z * z + w * w;\n};\n\nVec4.bufferNorm = function(inBuffer, inOffset)\n{\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        z = inBuffer[inOffset + 2],\n        w = inBuffer[inOffset + 3];\n\n    return math.sqrt(x * x + y * y + z * z + w * w);\n};\n\nVec4.bufferNormalize = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        z = inBuffer[inOffset + 2],\n        w = inBuffer[inOffset + 3],\n        n = x * x + y * y + z * z + w * w;\n\n    if (n < math.EPSILON2)\n    {\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = outBuffer[outOffset + 3] = 0.0;\n        return outBuffer;\n    }\n\n    n = 1.0 / math.sqrt(n);\n    outBuffer[outOffset] = x * n;\n    outBuffer[outOffset + 1] = y * n;\n    outBuffer[outOffset + 2] = z * n;\n    outBuffer[outOffset + 3] = w * n;\n\n    return outBuffer;\n};\n\nVec4.bufferDotProduct = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    return inBufferA[inOffsetA] * inBufferB[inOffsetB] +\n        inBufferA[inOffsetA + 1] * inBufferB[inOffsetB + 1] +\n        inBufferA[inOffsetA + 2] * inBufferB[inOffsetB + 2] +\n        inBufferA[inOffsetA + 3] * inBufferB[inOffsetB + 3];\n};\n\nVec4.bufferLinear = function(outBuffer, outOffset, inBufferP0, inOffsetP0, t, inBufferP1, inOffsetP1)\n{\n    var x = inBufferP0[inOffsetP0],\n        y = inBufferP0[inOffsetP0 + 1],\n        z = inBufferP0[inOffsetP0 + 2],\n        w = inBufferP0[inOffsetP0 + 3];\n\n    outBuffer[outOffset] = x + t * (inBufferP1[inOffsetP1] - x);\n    outBuffer[outOffset + 1] = y + t * (inBufferP1[inOffsetP1 + 1] - y);\n    outBuffer[outOffset + 2] = z + t * (inBufferP1[inOffsetP1 + 2] - z);\n    outBuffer[outOffset + 3] = w + t * (inBufferP1[inOffsetP1 + 3] - w);\n\n    return outBuffer;\n};\n\nVec4.bufferQuadratic = function(outBuffer, outOffset, inBufferP0, inOffsetP0, inBufferP1, inOffsetP1, t, inBufferP2, inOffsetP2)\n{\n    //Interpolation is between points P1 and P2\n    var f0 = 0.5 * (t - 1.0) * t,\n        f1 = 1.0 - t * t,\n        f2 = 0.5 * (t + 1.0) * t;\n\n    outBuffer[outOffset] = f0 * inBufferP0[inOffsetP0] + f1 * inBufferP1[inOffsetP1] + f2 * inBufferP2[inOffsetP2];\n    outBuffer[outOffset + 1] = f0 * inBufferP0[inOffsetP0 + 1] + f1 * inBufferP1[inOffsetP1 + 1] + f2 * inBufferP2[inOffsetP2 + 1];\n    outBuffer[outOffset + 2] = f0 * inBufferP0[inOffsetP0 + 2] + f1 * inBufferP1[inOffsetP1 + 2] + f2 * inBufferP2[inOffsetP2 + 2];\n    outBuffer[outOffset + 3] = f0 * inBufferP0[inOffsetP0 + 3] + f1 * inBufferP1[inOffsetP1 + 3] + f2 * inBufferP2[inOffsetP2 + 3];\n\n    return outBuffer;\n};\n\nVec4.bufferHermite = function(outBuffer, outOffset, inBufferT0, inOffsetT0, inBufferP0, inOffsetP0, t, inBufferP1, inOffsetP1, inBufferT1, inOffsetT1)\n{\n    //Ti is the tangent at point Pi\n    var tt = t * t,\n        f0 = tt * (t - 2.0) + t,\n        f1 = tt * (2.0 * t - 3.0) + 1.0,\n        f2 = tt * (3.0 - 2.0 * t),\n        f3 = tt * (t - 1.0);\n\n    outBuffer[outOffset] = f0 * inBufferT0[inOffsetT0] + f1 * inBufferP0[inOffsetP0] + f2 * inBufferP1[inOffsetP1] + f3 * inBufferT1[inOffsetT1];\n    outBuffer[outOffset + 1] = f0 * inBufferT0[inOffsetT0 + 1] + f1 * inBufferP0[inOffsetP0 + 1] + f2 * inBufferP1[inOffsetP1 + 1] + f3 * inBufferT1[inOffsetT1 + 1];\n    outBuffer[outOffset + 2] = f0 * inBufferT0[inOffsetT0 + 2] + f1 * inBufferP0[inOffsetP0 + 2] + f2 * inBufferP1[inOffsetP1 + 2] + f3 * inBufferT1[inOffsetT1 + 2];\n    outBuffer[outOffset + 3] = f0 * inBufferT0[inOffsetT0 + 3] + f1 * inBufferP0[inOffsetP0 + 3] + f2 * inBufferP1[inOffsetP1 + 3] + f3 * inBufferT1[inOffsetT1 + 3];\n\n    return outBuffer;\n};\n\nVec4.bufferBezier = function(outBuffer, outOffset, inBufferC0, inOffsetC0, inBufferP0, inOffsetP0, t, inBufferP1, inOffsetP1, inBufferC1, inOffsetC1)\n{\n    //Ci is the control point at point Pi\n    //Bezier interpolation is a special Hermite interpolation with:\n    //T0 = 3 * (C0 - P0)\n    //T1 = 3 * (P1 - C1)\n    var tt = t * t,\n        lessT = 1.0 - t,\n        lessT2 = lessT * lessT,\n        f0 = 3.0 * lessT2 * t,\n        f1 = lessT2 * lessT,\n        f2 = tt * t,\n        f3 = 3.0 * lessT * tt;\n\n    outBuffer[outOffset] = f0 * inBufferC0[inOffsetC0] + f1 * inBufferP0[inOffsetP0] + f2 * inBufferP1[inOffsetP1] + f3 * inBufferC1[inOffsetC1];\n    outBuffer[outOffset + 1] = f0 * inBufferC0[inOffsetC0 + 1] + f1 * inBufferP0[inOffsetP0 + 1] + f2 * inBufferP1[inOffsetP1 + 1] + f3 * inBufferC1[inOffsetC1 + 1];\n    outBuffer[outOffset + 2] = f0 * inBufferC0[inOffsetC0 + 2] + f1 * inBufferP0[inOffsetP0 + 2] + f2 * inBufferP1[inOffsetP1 + 2] + f3 * inBufferC1[inOffsetC1 + 2];\n    outBuffer[outOffset + 3] = f0 * inBufferC0[inOffsetC0 + 3] + f1 * inBufferP0[inOffsetP0 + 3] + f2 * inBufferP1[inOffsetP1 + 3] + f3 * inBufferC1[inOffsetC1 + 3];\n\n    return outBuffer;\n};\n\nVec4.bufferCatmullRom = function(outBuffer, outOffset, inBufferP0, inOffsetP0, inBufferP1, inOffsetP1, t, inBufferP2, inOffsetP2, inBufferP3, inOffsetP3)\n{\n    //Interpolation is between points P1 and P2\n    //Catmull-Rom interpolation is a special Hermite interpolation with:\n    //Ti = 0.5 * (Pi+1 - Pi-1)\n    var tt = t * t,\n        lessHalfT = -0.5 * t,\n        f0 = lessHalfT * (tt + 1.0) + tt,\n        f1 = lessHalfT * (5.0 * t - 3.0 * tt) + 1.0,\n        f2 = lessHalfT * (3.0 * tt - 4.0 * t - 1.0),\n        f3 = lessHalfT * (t - tt);\n\n    outBuffer[outOffset] = f0 * inBufferP0[inOffsetP0] + f1 * inBufferP1[inOffsetP1] + f2 * inBufferP2[inOffsetP2] + f3 * inBufferP3[inOffsetP3];\n    outBuffer[outOffset + 1] = f0 * inBufferP0[inOffsetP0 + 1] + f1 * inBufferP1[inOffsetP1 + 1] + f2 * inBufferP2[inOffsetP2 + 1] + f3 * inBufferP3[inOffsetP3 + 1];\n    outBuffer[outOffset + 2] = f0 * inBufferP0[inOffsetP0 + 2] + f1 * inBufferP1[inOffsetP1 + 2] + f2 * inBufferP2[inOffsetP2 + 2] + f3 * inBufferP3[inOffsetP3 + 2];\n    outBuffer[outOffset + 3] = f0 * inBufferP0[inOffsetP0 + 3] + f1 * inBufferP1[inOffsetP1 + 3] + f2 * inBufferP2[inOffsetP2 + 3] + f3 * inBufferP3[inOffsetP3 + 3];\n\n    return outBuffer;\n};\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar math = require(\"./math\");\n\nvar Mat2 = module.exports = function()\n{\n    //Always initialized to 0\n    this.buffer = new Float32Array(4);\n    this.buffer[0] = this.buffer[3] = 1.0;\n};\n\nMat2.prototype.setFromArray = function(arr)\n{\n    //Column 0\n    this.buffer[0] = arr[0];\n    this.buffer[1] = arr[1];\n\n    //Column 1\n    this.buffer[2] = arr[2];\n    this.buffer[3] = arr[3];\n\n    return this;\n};\n\nMat2.prototype.setColumnVec2 = function(col, v2)\n{\n    var i = col * 2,\n        inBuffer = v2.buffer;\n\n    this.buffer[i] = inBuffer[0];\n    this.buffer[i + 1] = inBuffer[1];\n\n    return this;\n};\n\nMat2.prototype.setFromColumnsVec2 = function(v2i, v2j)\n{\n    var inBuffer = v2i.buffer;\n    this.buffer[0] = inBuffer[0];\n    this.buffer[1] = inBuffer[1];\n\n    inBuffer = v2j.buffer;\n    this.buffer[2] = inBuffer[0];\n    this.buffer[3] = inBuffer[1];\n\n    return this;\n};\n\nMat2.prototype.setFromRotAngle = function(angle)\n{\n    Mat2.bufferSetFromRotAngle(this.buffer, 0, angle);\n    return this;\n};\n\nMat2.prototype.setFromMat3RotScale = function(m3)\n{\n    Mat2.bufferSetFromMat3RotScale(this.buffer, 0, m3.buffer, 0);\n    return this;\n};\n\nMat2.prototype.setFromRSTransfo = function(rotAngle, scaleV2)\n{\n    Mat2.bufferSetFromRSTransfo(this.buffer, 0, rotAngle, scaleV2.buffer, 0);\n    return this;\n};\n\nMat2.prototype.setIdentity = function()\n{\n    this.buffer[0] = this.buffer[3] = 1.0;\n    this.buffer[1] = this.buffer[2] = 0.0;\n\n    return this;\n};\n\nMat2.prototype.copy = function(m2)\n{\n    var inBuffer = m2.buffer;\n\n    //Column 0\n    this.buffer[0] = inBuffer[0];\n    this.buffer[1] = inBuffer[1];\n\n    //Column 1\n    this.buffer[2] = inBuffer[2];\n    this.buffer[3] = inBuffer[3];\n\n    return this;\n};\n\nMat2.prototype.getRSTransfo = function(scaleV2)\n{\n    return Mat2.bufferGetRSTransfo(scaleV2.buffer, 0, this.buffer, 0);\n};\n\nMat2.prototype.normalizeRSTransfo = function(m2)\n{\n    Mat2.bufferNormalizeRSTransfo(this.buffer, 0, m2.buffer, 0);\n    return this;\n};\n\nMat2.prototype.normalizeRSTransfoInPlace = function()\n{\n    Mat2.bufferNormalizeRSTransfo(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat2.prototype.isIdentity = function()\n{\n    return Mat2.bufferIsIdentity(this.buffer, 0);\n};\n\nMat2.prototype.equals = function(m2)\n{\n    return Mat2.bufferEquals(this.buffer, 0, m2.buffer, 0);\n};\n\nMat2.prototype.multiply = function(m2A, m2B)\n{\n    Mat2.bufferMultiply(this.buffer, 0, m2A.buffer, 0, m2B.buffer, 0);\n    return this;\n};\n\nMat2.prototype.multiplyInPlace = function(m2)\n{\n    Mat2.bufferMultiply(this.buffer, 0, this.buffer, 0, m2.buffer, 0);\n    return this;\n};\n\nMat2.prototype.invert = function(m2)\n{\n    Mat2.bufferInvert(this.buffer, 0, m2.buffer, 0);\n    return this;\n};\n\nMat2.prototype.invertInPlace = function()\n{\n    Mat2.bufferInvert(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat2.prototype.transpose = function(m2)\n{\n    Mat2.bufferTranspose(this.buffer, 0, m2.buffer, 0);\n    return this;\n};\n\nMat2.prototype.transposeInPlace = function()\n{\n    Mat2.bufferTranspose(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat2.prototype.transformVec2 = function(outV2, inV2)\n{\n    Mat2.bufferTransformVec2(outV2.buffer, 0, this.buffer, 0, inV2.buffer, 0);\n    return outV2;\n};\n\nMat2.prototype.transformVec2InPlace = function(v2)\n{\n    Mat2.bufferTransformVec2(v2.buffer, 0, this.buffer, 0, v2.buffer, 0);\n    return v2;\n};\n\n//MUST be considered as constants\nMat2.NB_COMPONENTS = 4;\nMat2.IDENTITY = new Mat2();\n\nMat2.createBuffer = function(nbElems)\n{\n    nbElems *= 4;\n\n    //Always initialized to 0\n    var buffer = new Float32Array(nbElems);\n\n    for (var i = 0; i < nbElems; i += 4)\n    {\n        buffer[i] = buffer[i + 3] = 1.0;\n    }\n\n    return buffer;\n};\n\nMat2.bufferSetFromRotAngle = function(outBuffer, outOffset, angle)\n{\n    var cosa = math.cos(angle),\n        sina = math.sin(angle);\n\n    outBuffer[outOffset] = cosa;\n    outBuffer[outOffset + 1] = sina;\n\n    outBuffer[outOffset + 2] = -sina;\n    outBuffer[outOffset + 3] = cosa;\n\n    return outBuffer;\n};\n\nMat2.bufferSetFromMat3RotScale = function(outBuffer, outOffset, inMat3Buffer, inMat3Offset)\n{\n    outBuffer[outOffset] = inMat3Buffer[inMat3Offset];\n    outBuffer[outOffset + 1] = inMat3Buffer[inMat3Offset + 1];\n\n    outBuffer[outOffset + 2] = inMat3Buffer[inMat3Offset + 3];\n    outBuffer[outOffset + 3] = inMat3Buffer[inMat3Offset + 4];\n\n    return outBuffer;\n};\n\nMat2.bufferSetFromRSTransfo = function(outBuffer, outOffset, rotAngle, inScaleVec2Buffer, inScaleVec2Offset)\n{\n    var cosa = math.cos(rotAngle),\n        sina = math.sin(rotAngle),\n        sx = inScaleVec2Buffer[inScaleVec2Offset],\n        sy = inScaleVec2Buffer[inScaleVec2Offset + 1];\n\n    outBuffer[outOffset] = cosa * sx;\n    outBuffer[outOffset + 1] = sina * sx;\n\n    outBuffer[outOffset + 2] = -sina * sy;\n    outBuffer[outOffset + 3] = cosa * sy;\n\n    return outBuffer;\n};\n\n//It is safe to use a \"statically\" shared temporary buffer for\n//_orthoNormalizeTransfo because web workers never share their global\n//contexts, so _sharedTmpBuffer will never be accessed from different\n//threads\nvar _sharedTmpBuffer = new Float32Array(6);\n\nMat2._orthoNormalizeTransfo = function(inMatBuffer, inMatOffset, vecSize)\n{\n    //RSTransfo 2x2 matrix is normalized using the stabilized Gram–Schmidt\n    //orthonormalization algorithm\n\n    //Normalize v0\n    var x0 = inMatBuffer[inMatOffset],\n        y0 = inMatBuffer[inMatOffset + 1],\n        n = x0 * x0 + y0 * y0;\n\n    if (n < math.EPSILON2)\n    {\n        _sharedTmpBuffer[4] = x0 = y0 = 0.0;\n    }\n    else\n    {\n        _sharedTmpBuffer[4] = n = math.sqrt(n);\n        n = 1.0 / n;\n        x0 *= n;\n        y0 *= n;\n    }\n\n    //Remove v1/v0 skew\n    inMatOffset += vecSize;\n    var x1 = inMatBuffer[inMatOffset],\n        y1 = inMatBuffer[inMatOffset + 1];\n\n    n = x1 * x0 + y1 * y0;\n    x1 -= n * x0;\n    y1 -= n * y0;\n\n    //Normalize v1\n    n = x1 * x1 + y1 * y1;\n    if (n < math.EPSILON2)\n    {\n        _sharedTmpBuffer[5] = x1 = y1 = 0.0;\n    }\n    else\n    {\n        _sharedTmpBuffer[5] = n = math.sqrt(n);\n        n = 1.0 / n;\n        x1 *= n;\n        y1 *= n;\n    }\n\n    _sharedTmpBuffer[0] = x0;\n    _sharedTmpBuffer[1] = y0;\n\n    _sharedTmpBuffer[2] = x1;\n    _sharedTmpBuffer[3] = y1;\n\n    return _sharedTmpBuffer;\n};\n\nMat2.bufferGetRSTransfo = function(outScaleVec2Buffer, outScaleVec2Offset, inMat2Buffer, inMat2Offset)\n{\n    var buffer = Mat2._orthoNormalizeTransfo(inMat2Buffer, inMat2Offset, 2);\n\n    outScaleVec2Buffer[outScaleVec2Offset] = buffer[4];\n    outScaleVec2Buffer[outScaleVec2Offset + 1] = buffer[5];\n\n    return math.atan2(buffer[1], buffer[0]);\n};\n\nMat2.bufferNormalizeRSTransfo = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    var buffer = Mat2._orthoNormalizeTransfo(inBuffer, inOffset, 2),\n        sx = buffer[4],\n        sy = buffer[5];\n\n    outBuffer[outOffset] = buffer[0] * sx;\n    outBuffer[outOffset + 1] = buffer[1] * sx;\n\n    outBuffer[outOffset + 2] = buffer[2] * sy;\n    outBuffer[outOffset + 3] = buffer[3] * sy;\n\n    return outBuffer;\n};\n\nMat2.bufferIsIdentity = function(inBuffer, inOffset)\n{\n    return ((math.abs(inBuffer[inOffset] - 1.0) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 1]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 2]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 3] - 1.0) < math.EPSILON));\n};\n\nMat2.bufferEquals = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    return (((inBufferA === inBufferB) && (inOffsetA === inOffsetB)) ||\n        ((math.abs(inBufferB[inOffsetB] - inBufferA[inOffsetA]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 2] - inBufferA[inOffsetA + 2]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 3] - inBufferA[inOffsetA + 3]) < math.EPSILON)));\n};\n\nMat2.bufferMultiply = function(outBuffer, outOffset, inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    //M = | m00 m10 |\n    //    | m01 m11 |\n    var m00 = inBufferA[inOffsetA],\n        m01 = inBufferA[inOffsetA + 1],\n        m10 = inBufferA[inOffsetA + 2],\n        m11 = inBufferA[inOffsetA + 3],\n        x = inBufferB[inOffsetB],\n        y = inBufferB[inOffsetB + 1];\n\n    outBuffer[outOffset] = x * m00 + y * m10;\n    outBuffer[outOffset + 1] = x * m01 + y * m11;\n\n    x = inBufferB[inOffsetB + 2];\n    y = inBufferB[inOffsetB + 3];\n    outBuffer[outOffset + 2] = x * m00 + y * m10;\n    outBuffer[outOffset + 3] = x * m01 + y * m11;\n\n    return outBuffer;\n};\n\nMat2.bufferInvert = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    //M = | m00 m10 |\n    //    | m01 m11 |\n    var m00 = inBuffer[inOffset],\n        m01 = inBuffer[inOffset + 1],\n        m10 = inBuffer[inOffset + 2],\n        m11 = inBuffer[inOffset + 3],\n        det = m00 * m11 - m10 * m01;\n\n    if (math.abs(det) < math.EPSILON)\n    {\n        outBuffer[outOffset] = outBuffer[outOffset + 1] =\n            outBuffer[outOffset + 2] = outBuffer[outOffset + 3] =\n            (det >= 0.0) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n        return outBuffer;\n    }\n\n    det = 1.0 / det;\n    outBuffer[outOffset] = m11 * det;\n    outBuffer[outOffset + 1] = -m01 * det;\n    outBuffer[outOffset + 2] = -m10 * det;\n    outBuffer[outOffset + 3] = m00 * det;\n\n    return outBuffer;\n};\n\nMat2.bufferTranspose = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    //M = | m00 m10 |\n    //    | m01 m11 |\n    var m01 = inBuffer[inOffset + 1];\n\n    outBuffer[outOffset] = inBuffer[inOffset];\n    outBuffer[outOffset + 1] = inBuffer[inOffset + 2];\n    outBuffer[outOffset + 2] = m01;\n    outBuffer[outOffset + 3] = inBuffer[inOffset + 3];\n\n    return outBuffer;\n};\n\nMat2.bufferTransformVec2 = function(outV2Buffer, outV2Offset, inM2Buffer, inM2Offset, inV2Buffer, inV2Offset)\n{\n    var x = inV2Buffer[inV2Offset],\n        y = inV2Buffer[inV2Offset + 1];\n\n    outV2Buffer[outV2Offset] = x * inM2Buffer[inM2Offset] + y * inM2Buffer[inM2Offset + 2];\n    outV2Buffer[outV2Offset + 1] = x * inM2Buffer[inM2Offset + 1] + y * inM2Buffer[inM2Offset + 3];\n\n    return outV2Buffer;\n};\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar math = require(\"./math\");\nvar Quat = require(\"./Quat\");\nvar Mat2 = require(\"./Mat2\");\n\nvar Mat3 = module.exports = function()\n{\n    //Always initialized to 0\n    this.buffer = new Float32Array(9);\n    this.buffer[0] = this.buffer[4] = this.buffer[8] = 1.0;\n};\n\nMat3.prototype.setFromArray = function(arr)\n{\n    //Column 0\n    this.buffer[0] = arr[0];\n    this.buffer[1] = arr[1];\n    this.buffer[2] = arr[2];\n\n    //Column 1\n    this.buffer[3] = arr[3];\n    this.buffer[4] = arr[4];\n    this.buffer[5] = arr[5];\n\n    //Column 2\n    this.buffer[6] = arr[6];\n    this.buffer[7] = arr[7];\n    this.buffer[8] = arr[8];\n\n    return this;\n};\n\nMat3.prototype.setColumnVec3 = function(col, v3)\n{\n    var i = col * 3,\n        inBuffer = v3.buffer;\n\n    this.buffer[i] = inBuffer[0];\n    this.buffer[i + 1] = inBuffer[1];\n    this.buffer[i + 2] = inBuffer[2];\n\n    return this;\n};\n\nMat3.prototype.setFromColumnsVec3 = function(v3i, v3j, v3k)\n{\n    var inBuffer = v3i.buffer;\n    this.buffer[0] = inBuffer[0];\n    this.buffer[1] = inBuffer[1];\n    this.buffer[2] = inBuffer[2];\n\n    inBuffer = v3j.buffer;\n    this.buffer[3] = inBuffer[0];\n    this.buffer[4] = inBuffer[1];\n    this.buffer[5] = inBuffer[2];\n\n    inBuffer = v3k.buffer;\n    this.buffer[6] = inBuffer[0];\n    this.buffer[7] = inBuffer[1];\n    this.buffer[8] = inBuffer[2];\n\n    return this;\n};\n\nMat3.prototype.setColumnVec2 = function(col, v2)\n{\n    var i = col * 3,\n        inBuffer = v2.buffer;\n\n    this.buffer[i] = inBuffer[0];\n    this.buffer[i + 1] = inBuffer[1];\n    this.buffer[i + 2] = (col === 2) ? 1.0 : 0.0;\n\n    return this;\n};\n\nMat3.prototype.setFromColumnsVec2 = function(v2i, v2j, v2k)\n{\n    var inBuffer = v2i.buffer;\n    this.buffer[0] = inBuffer[0];\n    this.buffer[1] = inBuffer[1];\n    this.buffer[2] = 0.0;\n\n    inBuffer = v2j.buffer;\n    this.buffer[3] = inBuffer[0];\n    this.buffer[4] = inBuffer[1];\n    this.buffer[5] = 0.0;\n\n    inBuffer = v2k.buffer;\n    this.buffer[6] = inBuffer[0];\n    this.buffer[7] = inBuffer[1];\n    this.buffer[8] = 1.0;\n\n    return this;\n};\n\nMat3.prototype.setFromQuat = function(q)\n{\n    //q quaternion must be a unit quaternion\n    Mat3.bufferSetFromQuat(this.buffer, 0, q.buffer, 0);\n    return this;\n};\n\nMat3.prototype.setFromMat4RotScale = function(m4)\n{\n    Mat3.bufferSetFromMat4RotScale(this.buffer, 0, m4.buffer, 0);\n    return this;\n};\n\nMat3.prototype.setFromRSTransfo3D = function(rotQuat, scaleV3)\n{\n    //rotQuat quaternion must be a unit quaternion\n    Mat3.bufferSetFromRSTransfo3D(this.buffer, 0, rotQuat.buffer, 0, scaleV3.buffer, 0);\n    return this;\n};\n\nMat3.prototype.setRotation2D = function(angle)\n{\n    Mat3.bufferSetRotation2D(this.buffer, 0, angle);\n    return this;\n};\n\nMat3.prototype.setRotScale2DFromMat2 = function(m2)\n{\n    Mat3.bufferSetRotScale2DFromMat2(this.buffer, 0, m2.buffer, 0);\n    return this;\n};\n\nMat3.prototype.setFromTRSTransfo2D = function(transV2, rotAngle, scaleV2)\n{\n    Mat3.bufferSetFromTRSTransfo2D(this.buffer, 0, transV2.buffer, 0, rotAngle, scaleV2.buffer, 0);\n    return this;\n};\n\nMat3.prototype.setIdentity = function()\n{\n    this.buffer[0] = this.buffer[4] = this.buffer[8] = 1.0;\n    this.buffer[1] = this.buffer[2] = this.buffer[3] =\n        this.buffer[5] = this.buffer[6] = this.buffer[7] = 0.0;\n\n    return this;\n};\n\nMat3.prototype.copy = function(m3)\n{\n    var inBuffer = m3.buffer;\n\n    //Column 0\n    this.buffer[0] = inBuffer[0];\n    this.buffer[1] = inBuffer[1];\n    this.buffer[2] = inBuffer[2];\n\n    //Column 1\n    this.buffer[3] = inBuffer[3];\n    this.buffer[4] = inBuffer[4];\n    this.buffer[5] = inBuffer[5];\n\n    //Column 2\n    this.buffer[6] = inBuffer[6];\n    this.buffer[7] = inBuffer[7];\n    this.buffer[8] = inBuffer[8];\n\n    return this;\n};\n\nMat3.prototype.getRSTransfo3D = function(rotQuat, scaleV3)\n{\n    Mat3.bufferGetRSTransfo3D(rotQuat.buffer, 0, scaleV3.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat3.prototype.normalizeRSTransfo3D = function(m3)\n{\n    Mat3.bufferNormalizeRSTransfo3D(this.buffer, 0, m3.buffer, 0);\n    return this;\n};\n\nMat3.prototype.normalizeRSTransfo3DInPlace = function()\n{\n    Mat3.bufferNormalizeRSTransfo3D(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat3.prototype.getTRSTransfo2D = function(transV2, scaleV2)\n{\n    return Mat3.bufferGetTRSTransfo2D(transV2.buffer, 0, scaleV2.buffer, 0, this.buffer, 0);\n};\n\nMat3.prototype.normalizeTRSTransfo2D = function(m3)\n{\n    Mat3.bufferNormalizeTRSTransfo2D(this.buffer, 0, m3.buffer, 0);\n    return this;\n};\n\nMat3.prototype.normalizeTRSTransfo2DInPlace = function()\n{\n    Mat3.bufferNormalizeTRSTransfo2D(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat3.prototype.isIdentity = function()\n{\n    return Mat3.bufferIsIdentity(this.buffer, 0);\n};\n\nMat3.prototype.equals = function(m3)\n{\n    return Mat3.bufferEquals(this.buffer, 0, m3.buffer, 0);\n};\n\nMat3.prototype.multiply = function(m3A, m3B)\n{\n    Mat3.bufferMultiply(this.buffer, 0, m3A.buffer, 0, m3B.buffer, 0);\n    return this;\n};\n\nMat3.prototype.multiplyInPlace = function(m3)\n{\n    Mat3.bufferMultiply(this.buffer, 0, this.buffer, 0, m3.buffer, 0);\n    return this;\n};\n\nMat3.prototype.invert = function(m3)\n{\n    Mat3.bufferInvert(this.buffer, 0, m3.buffer, 0);\n    return this;\n};\n\nMat3.prototype.invertInPlace = function()\n{\n    Mat3.bufferInvert(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat3.prototype.transpose = function(m3)\n{\n    Mat3.bufferTranspose(this.buffer, 0, m3.buffer, 0);\n    return this;\n};\n\nMat3.prototype.transposeInPlace = function()\n{\n    Mat3.bufferTranspose(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat3.prototype.transformVec3 = function(outV3, inV3)\n{\n    Mat3.bufferTransformVec3(outV3.buffer, 0, this.buffer, 0, inV3.buffer, 0);\n    return outV3;\n};\n\nMat3.prototype.transformVec3InPlace = function(v3)\n{\n    Mat3.bufferTransformVec3(v3.buffer, 0, this.buffer, 0, v3.buffer, 0);\n    return v3;\n};\n\nMat3.prototype.transformVec2Pos = function(outV2, inV2)\n{\n    Mat3.bufferTransformVec2Pos(outV2.buffer, 0, this.buffer, 0, inV2.buffer, 0);\n    return outV2;\n};\n\nMat3.prototype.transformVec2PosInPlace = function(v2)\n{\n    Mat3.bufferTransformVec2Pos(v2.buffer, 0, this.buffer, 0, v2.buffer, 0);\n    return v2;\n};\n\nMat3.prototype.transformVec2Dir = function(outV2, inV2)\n{\n    Mat3.bufferTransformVec2Dir(outV2.buffer, 0, this.buffer, 0, inV2.buffer, 0);\n    return outV2;\n};\n\nMat3.prototype.transformVec2DirInPlace = function(v2)\n{\n    Mat3.bufferTransformVec2Dir(v2.buffer, 0, this.buffer, 0, v2.buffer, 0);\n    return v2;\n};\n\n//MUST be considered as constants\nMat3.NB_COMPONENTS = 9;\nMat3.IDENTITY = new Mat3();\n\nMat3.createBuffer = function(nbElems)\n{\n    nbElems *= 9;\n\n    //Always initialized to 0\n    var buffer = new Float32Array(nbElems);\n\n    for (var i = 0; i < nbElems; i += 9)\n    {\n        buffer[i] = buffer[i + 4] = buffer[i + 8] = 1.0;\n    }\n\n    return buffer;\n};\n\nMat3.bufferSetFromQuat = function(outBuffer, outOffset, inQBuffer, inQOffset)\n{\n    //q quaternion must be a unit quaternion\n    var x = inQBuffer[inQOffset],\n        y = inQBuffer[inQOffset + 1],\n        z = inQBuffer[inQOffset + 2],\n        w = inQBuffer[inQOffset + 3],\n        x2 = x + x, x2x = x2 * x, x2y = x2 * y, x2z = x2 * z, x2w = x2 * w,\n        y2 = y + y, y2y = y2 * y, y2z = y2 * z, y2w = y2 * w,\n        z2 = z + z, z2z = z2 * z, z2w = z2 * w;\n\n    outBuffer[outOffset] = 1.0 - y2y - z2z;\n    outBuffer[outOffset + 1] = z2w + x2y;\n    outBuffer[outOffset + 2] = x2z - y2w;\n\n    outBuffer[outOffset + 3] = x2y - z2w;\n    outBuffer[outOffset + 4] = 1.0 - x2x - z2z;\n    outBuffer[outOffset + 5] = x2w + y2z;\n\n    outBuffer[outOffset + 6] = y2w + x2z;\n    outBuffer[outOffset + 7] = y2z - x2w;\n    outBuffer[outOffset + 8] = 1.0 - x2x - y2y;\n\n    return outBuffer;\n};\n\nMat3.bufferSetFromMat4RotScale = function(outBuffer, outOffset, inMat4Buffer, inMat4Offset)\n{\n    outBuffer[outOffset] = inMat4Buffer[inMat4Offset];\n    outBuffer[outOffset + 1] = inMat4Buffer[inMat4Offset + 1];\n    outBuffer[outOffset + 2] = inMat4Buffer[inMat4Offset + 2];\n\n    outBuffer[outOffset + 3] = inMat4Buffer[inMat4Offset + 4];\n    outBuffer[outOffset + 4] = inMat4Buffer[inMat4Offset + 5];\n    outBuffer[outOffset + 5] = inMat4Buffer[inMat4Offset + 6];\n\n    outBuffer[outOffset + 6] = inMat4Buffer[inMat4Offset + 8];\n    outBuffer[outOffset + 7] = inMat4Buffer[inMat4Offset + 9];\n    outBuffer[outOffset + 8] = inMat4Buffer[inMat4Offset + 10];\n\n    return outBuffer;\n};\n\nMat3.bufferSetFromRSTransfo3D = function(outBuffer, outOffset, inRotQuatBuffer, inRotQuatOffset, inScaleVec3Buffer, inScaleVec3Offset)\n{\n    //rotQuat quaternion must be a unit quaternion\n    var x = inRotQuatBuffer[inRotQuatOffset],\n        y = inRotQuatBuffer[inRotQuatOffset + 1],\n        z = inRotQuatBuffer[inRotQuatOffset + 2],\n        w = inRotQuatBuffer[inRotQuatOffset + 3],\n        x2 = x + x, x2x = x2 * x, x2y = x2 * y, x2z = x2 * z, x2w = x2 * w,\n        y2 = y + y, y2y = y2 * y, y2z = y2 * z, y2w = y2 * w,\n        z2 = z + z, z2z = z2 * z, z2w = z2 * w,\n        sx = inScaleVec3Buffer[inScaleVec3Offset],\n        sy = inScaleVec3Buffer[inScaleVec3Offset + 1],\n        sz = inScaleVec3Buffer[inScaleVec3Offset + 2];\n\n    outBuffer[outOffset] = (1.0 - y2y - z2z) * sx;\n    outBuffer[outOffset + 1] = (z2w + x2y) * sx;\n    outBuffer[outOffset + 2] = (x2z - y2w) * sx;\n\n    outBuffer[outOffset + 3] = (x2y - z2w) * sy;\n    outBuffer[outOffset + 4] = (1.0 - x2x - z2z) * sy;\n    outBuffer[outOffset + 5] = (x2w + y2z) * sy;\n\n    outBuffer[outOffset + 6] = (y2w + x2z) * sz;\n    outBuffer[outOffset + 7] = (y2z - x2w) * sz;\n    outBuffer[outOffset + 8] = (1.0 - x2x - y2y) * sz;\n\n    return outBuffer;\n};\n\nMat3.bufferSetRotation2D = function(outBuffer, outOffset, angle)\n{\n    var cosa = math.cos(angle),\n        sina = math.sin(angle);\n\n    outBuffer[outOffset] = cosa;\n    outBuffer[outOffset + 1] = sina;\n    outBuffer[outOffset + 2] = 0.0;\n\n    outBuffer[outOffset + 3] = -sina;\n    outBuffer[outOffset + 4] = cosa;\n    outBuffer[outOffset + 5] = 0.0;\n\n    return outBuffer;\n};\n\nMat3.bufferSetRotScale2DFromMat2 = function(outBuffer, outOffset, inMat2Buffer, inMat2Offset)\n{\n    outBuffer[outOffset] = inMat2Buffer[inMat2Offset];\n    outBuffer[outOffset + 1] = inMat2Buffer[inMat2Offset + 1];\n    outBuffer[outOffset + 2] = 0.0;\n\n    outBuffer[outOffset + 3] = inMat2Buffer[inMat2Offset + 2];\n    outBuffer[outOffset + 4] = inMat2Buffer[inMat2Offset + 3];\n    outBuffer[outOffset + 5] = 0.0;\n\n    return outBuffer;\n};\n\nMat3.bufferSetFromTRSTransfo2D = function(outBuffer, outOffset, inTransVec2Buffer, inTransVec2Offset, rotAngle, inScaleVec2Buffer, inScaleVec2Offset)\n{\n    var cosa = math.cos(rotAngle),\n        sina = math.sin(rotAngle),\n        sx = inScaleVec2Buffer[inScaleVec2Offset],\n        sy = inScaleVec2Buffer[inScaleVec2Offset + 1];\n\n    outBuffer[outOffset] = cosa * sx;\n    outBuffer[outOffset + 1] = sina * sx;\n    outBuffer[outOffset + 2] = 0.0;\n\n    outBuffer[outOffset + 3] = -sina * sy;\n    outBuffer[outOffset + 4] = cosa * sy;\n    outBuffer[outOffset + 5] = 0.0;\n\n    outBuffer[outOffset + 6] = inTransVec2Buffer[inTransVec2Offset];\n    outBuffer[outOffset + 7] = inTransVec2Buffer[inTransVec2Offset + 1];\n    outBuffer[outOffset + 8] = 1.0;\n\n    return outBuffer;\n};\n\n//It is safe to use a \"statically\" shared temporary buffer for\n//_orthoNormalizeTransfo because web workers never share their global\n//contexts, so _sharedTmpBuffer will never be accessed from different\n//threads\nvar _sharedTmpBuffer = new Float32Array(12);\n\nMat3._orthoNormalizeTransfo = function(inMatBuffer, inMatOffset, vecSize)\n{\n    //RSTransfo 3x3 matrix is normalized using the stabilized Gram–Schmidt\n    //orthonormalization algorithm\n\n    //Normalize v0\n    var x0 = inMatBuffer[inMatOffset],\n        y0 = inMatBuffer[inMatOffset + 1],\n        z0 = inMatBuffer[inMatOffset + 2],\n        n = x0 * x0 + y0 * y0 + z0 * z0;\n\n    if (n < math.EPSILON2)\n    {\n        _sharedTmpBuffer[9] = x0 = y0 = z0 = 0.0;\n    }\n    else\n    {\n        _sharedTmpBuffer[9] = n = math.sqrt(n);\n        n = 1.0 / n;\n        x0 *= n;\n        y0 *= n;\n        z0 *= n;\n    }\n\n    //Remove v1/v0 skew\n    inMatOffset += vecSize;\n    var x1 = inMatBuffer[inMatOffset],\n        y1 = inMatBuffer[inMatOffset + 1],\n        z1 = inMatBuffer[inMatOffset + 2];\n\n    n = x1 * x0 + y1 * y0 + z1 * z0;\n    x1 -= n * x0;\n    y1 -= n * y0;\n    z1 -= n * z0;\n\n    //Remove v2/v0 skew\n    inMatOffset += vecSize;\n    var x2 = inMatBuffer[inMatOffset],\n        y2 = inMatBuffer[inMatOffset + 1],\n        z2 = inMatBuffer[inMatOffset + 2];\n\n    n = x2 * x0 + y2 * y0 + z2 * z0;\n    x2 -= n * x0;\n    y2 -= n * y0;\n    z2 -= n * z0;\n\n    //Normalize v1\n    n = x1 * x1 + y1 * y1 + z1 * z1;\n    if (n < math.EPSILON2)\n    {\n        _sharedTmpBuffer[10] = x1 = y1 = z1 = 0.0;\n    }\n    else\n    {\n        _sharedTmpBuffer[10] = n = math.sqrt(n);\n        n = 1.0 / n;\n        x1 *= n;\n        y1 *= n;\n        z1 *= n;\n    }\n\n    //Remove v2/v1 skew\n    n = x2 * x1 + y2 * y1 + z2 * z1;\n    x2 -= n * x1;\n    y2 -= n * y1;\n    z2 -= n * z1;\n\n    //Normalize v2\n    n = x2 * x2 + y2 * y2 + z2 * z2;\n    if (n < math.EPSILON2)\n    {\n        _sharedTmpBuffer[11] = x2 = y2 = z2 = 0.0;\n    }\n    else\n    {\n        _sharedTmpBuffer[11] = n = math.sqrt(n);\n        n = 1.0 / n;\n        x2 *= n;\n        y2 *= n;\n        z2 *= n;\n    }\n\n    _sharedTmpBuffer[0] = x0;\n    _sharedTmpBuffer[1] = y0;\n    _sharedTmpBuffer[2] = z0;\n\n    _sharedTmpBuffer[3] = x1;\n    _sharedTmpBuffer[4] = y1;\n    _sharedTmpBuffer[5] = z1;\n\n    _sharedTmpBuffer[6] = x2;\n    _sharedTmpBuffer[7] = y2;\n    _sharedTmpBuffer[8] = z2;\n\n    return _sharedTmpBuffer;\n};\n\nMat3.bufferGetRSTransfo3D = function(outRotQuatBuffer, outRotQuatOffset, outScaleVec3Buffer, outScaleVec3Offset, inMat3Buffer, inMat3Offset)\n{\n    var buffer = Mat3._orthoNormalizeTransfo(inMat3Buffer, inMat3Offset, 3);\n\n    outScaleVec3Buffer[outScaleVec3Offset] = buffer[9];\n    outScaleVec3Buffer[outScaleVec3Offset + 1] = buffer[10];\n    outScaleVec3Buffer[outScaleVec3Offset + 2] = buffer[11];\n\n    Quat.bufferSetFromRotationMat3(outRotQuatBuffer, outRotQuatOffset, buffer, 0);\n\n    return inMat3Buffer;\n};\n\nMat3.bufferNormalizeRSTransfo3D = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    var buffer = Mat3._orthoNormalizeTransfo(inBuffer, inOffset, 3),\n        sx = buffer[9],\n        sy = buffer[10],\n        sz = buffer[11];\n\n    outBuffer[outOffset] = buffer[0] * sx;\n    outBuffer[outOffset + 1] = buffer[1] * sx;\n    outBuffer[outOffset + 2] = buffer[2] * sx;\n\n    outBuffer[outOffset + 3] = buffer[3] * sy;\n    outBuffer[outOffset + 4] = buffer[4] * sy;\n    outBuffer[outOffset + 5] = buffer[5] * sy;\n\n    outBuffer[outOffset + 6] = buffer[6] * sz;\n    outBuffer[outOffset + 7] = buffer[7] * sz;\n    outBuffer[outOffset + 8] = buffer[8] * sz;\n\n    return outBuffer;\n};\n\nMat3.bufferGetTRSTransfo2D = function(outTransVec2Buffer, outTransVec2Offset, outScaleVec2Buffer, outScaleVec2Offset, inMat3Buffer, inMat3Offset)\n{\n    var buffer = Mat2._orthoNormalizeTransfo(inMat3Buffer, inMat3Offset, 3);\n\n    outScaleVec2Buffer[outScaleVec2Offset] = buffer[4];\n    outScaleVec2Buffer[outScaleVec2Offset + 1] = buffer[5];\n\n    outTransVec2Buffer[outTransVec2Offset] = inMat3Buffer[inMat3Offset + 6];\n    outTransVec2Buffer[outTransVec2Offset + 1] = inMat3Buffer[inMat3Offset + 7];\n\n    return math.atan2(buffer[1], buffer[0]);\n};\n\nMat3.bufferNormalizeTRSTransfo2D = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    var buffer = Mat2._orthoNormalizeTransfo(inBuffer, inOffset, 3),\n        sx = buffer[4],\n        sy = buffer[5];\n\n    outBuffer[outOffset] = buffer[0] * sx;\n    outBuffer[outOffset + 1] = buffer[1] * sx;\n    outBuffer[outOffset + 2] = 0.0;\n\n    outBuffer[outOffset + 3] = buffer[2] * sy;\n    outBuffer[outOffset + 4] = buffer[3] * sy;\n    outBuffer[outOffset + 5] = 0.0;\n\n    outBuffer[outOffset + 6] = inBuffer[inOffset + 6];\n    outBuffer[outOffset + 7] = inBuffer[inOffset + 7];\n    outBuffer[outOffset + 8] = 1.0;\n\n    return outBuffer;\n};\n\nMat3.bufferIsIdentity = function(inBuffer, inOffset)\n{\n    return ((math.abs(inBuffer[inOffset] - 1.0) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 1]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 2]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 3]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 4] - 1.0) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 5]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 6]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 7]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 8] - 1.0) < math.EPSILON));\n};\n\nMat3.bufferEquals = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    return (((inBufferA === inBufferB) && (inOffsetA === inOffsetB)) ||\n        ((math.abs(inBufferB[inOffsetB] - inBufferA[inOffsetA]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 2] - inBufferA[inOffsetA + 2]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 3] - inBufferA[inOffsetA + 3]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 4] - inBufferA[inOffsetA + 4]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 5] - inBufferA[inOffsetA + 5]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 6] - inBufferA[inOffsetA + 6]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 7] - inBufferA[inOffsetA + 7]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 8] - inBufferA[inOffsetA + 8]) < math.EPSILON)));\n};\n\nMat3.bufferMultiply = function(outBuffer, outOffset, inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    //    | m00 m10 m20 |\n    //M = | m01 m11 m21 |\n    //    | m02 m12 m22 |\n    var m00 = inBufferA[inOffsetA],\n        m01 = inBufferA[inOffsetA + 1],\n        m02 = inBufferA[inOffsetA + 2],\n        m10 = inBufferA[inOffsetA + 3],\n        m11 = inBufferA[inOffsetA + 4],\n        m12 = inBufferA[inOffsetA + 5],\n        m20 = inBufferA[inOffsetA + 6],\n        m21 = inBufferA[inOffsetA + 7],\n        m22 = inBufferA[inOffsetA + 8],\n        x = inBufferB[inOffsetB],\n        y = inBufferB[inOffsetB + 1],\n        z = inBufferB[inOffsetB + 2];\n\n    outBuffer[outOffset] = x * m00 + y * m10 + z * m20;\n    outBuffer[outOffset + 1] = x * m01 + y * m11 + z * m21;\n    outBuffer[outOffset + 2] = x * m02 + y * m12 + z * m22;\n\n    x = inBufferB[inOffsetB + 3];\n    y = inBufferB[inOffsetB + 4];\n    z = inBufferB[inOffsetB + 5];\n    outBuffer[outOffset + 3] = x * m00 + y * m10 + z * m20;\n    outBuffer[outOffset + 4] = x * m01 + y * m11 + z * m21;\n    outBuffer[outOffset + 5] = x * m02 + y * m12 + z * m22;\n\n    x = inBufferB[inOffsetB + 6];\n    y = inBufferB[inOffsetB + 7];\n    z = inBufferB[inOffsetB + 8];\n    outBuffer[outOffset + 6] = x * m00 + y * m10 + z * m20;\n    outBuffer[outOffset + 7] = x * m01 + y * m11 + z * m21;\n    outBuffer[outOffset + 8] = x * m02 + y * m12 + z * m22;\n\n    return outBuffer;\n};\n\nMat3.bufferInvert = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    //    | m00 m10 m20 |\n    //M = | m01 m11 m21 |\n    //    | m02 m12 m22 |\n    var m00 = inBuffer[inOffset],\n        m01 = inBuffer[inOffset + 1],\n        m02 = inBuffer[inOffset + 2],\n        m10 = inBuffer[inOffset + 3],\n        m11 = inBuffer[inOffset + 4],\n        m12 = inBuffer[inOffset + 5],\n        m20 = inBuffer[inOffset + 6],\n        m21 = inBuffer[inOffset + 7],\n        m22 = inBuffer[inOffset + 8],\n        c00 = m11 * m22 - m21 * m12,\n        c01 = m20 * m12 - m10 * m22,\n        c02 = m10 * m21 - m20 * m11,\n        det = m00 * c00 + m01 * c01 + m02 * c02;\n\n    if (math.abs(det) < math.EPSILON)\n    {\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] =\n            outBuffer[outOffset + 3] = outBuffer[outOffset + 4] = outBuffer[outOffset + 5] =\n            outBuffer[outOffset + 6] = outBuffer[outOffset + 7] = outBuffer[outOffset + 8] =\n            (det >= 0.0) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n        return outBuffer;\n    }\n\n    det = 1.0 / det;\n    outBuffer[outOffset] = c00 * det;\n    outBuffer[outOffset + 1] = (m21 * m02 - m01 * m22) * det;\n    outBuffer[outOffset + 2] = (m01 * m12 - m11 * m02) * det;\n    outBuffer[outOffset + 3] = c01 * det;\n    outBuffer[outOffset + 4] = (m00 * m22 - m20 * m02) * det;\n    outBuffer[outOffset + 5] = (m10 * m02 - m00 * m12) * det;\n    outBuffer[outOffset + 6] = c02 * det;\n    outBuffer[outOffset + 7] = (m20 * m01 - m00 * m21) * det;\n    outBuffer[outOffset + 8] = (m00 * m11 - m10 * m01) * det;\n\n    return outBuffer;\n};\n\nMat3.bufferTranspose = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    //    | m00 m10 m20 |\n    //M = | m01 m11 m21 |\n    //    | m02 m12 m22 |\n    var m01 = inBuffer[inOffset + 1],\n        m02 = inBuffer[inOffset + 2],\n        m12 = inBuffer[inOffset + 5];\n\n    outBuffer[outOffset] = inBuffer[inOffset];\n    outBuffer[outOffset + 1] = inBuffer[inOffset + 3];\n    outBuffer[outOffset + 2] = inBuffer[inOffset + 6];\n    outBuffer[outOffset + 3] = m01;\n    outBuffer[outOffset + 4] = inBuffer[inOffset + 4];\n    outBuffer[outOffset + 5] = inBuffer[inOffset + 7];\n    outBuffer[outOffset + 6] = m02;\n    outBuffer[outOffset + 7] = m12;\n    outBuffer[outOffset + 8] = inBuffer[inOffset + 8];\n\n    return outBuffer;\n};\n\nMat3.bufferTransformVec3 = function(outV3Buffer, outV3Offset, inM3Buffer, inM3Offset, inV3Buffer, inV3Offset)\n{\n    var x = inV3Buffer[inV3Offset],\n        y = inV3Buffer[inV3Offset + 1],\n        z = inV3Buffer[inV3Offset + 2];\n\n    outV3Buffer[outV3Offset] = x * inM3Buffer[inM3Offset] + y * inM3Buffer[inM3Offset + 3] + z * inM3Buffer[inM3Offset + 6];\n    outV3Buffer[outV3Offset + 1] = x * inM3Buffer[inM3Offset + 1] + y * inM3Buffer[inM3Offset + 4] + z * inM3Buffer[inM3Offset + 7];\n    outV3Buffer[outV3Offset + 2] = x * inM3Buffer[inM3Offset + 2] + y * inM3Buffer[inM3Offset + 5] + z * inM3Buffer[inM3Offset + 8];\n\n    return outV3Buffer;\n};\n\nMat3.bufferTransformVec2Pos = function(outV2Buffer, outV2Offset, inM3Buffer, inM3Offset, inV2Buffer, inV2Offset)\n{\n    var x = inV2Buffer[inV2Offset],\n        y = inV2Buffer[inV2Offset + 1];\n\n    outV2Buffer[outV2Offset] = x * inM3Buffer[inM3Offset] + y * inM3Buffer[inM3Offset + 3] + inM3Buffer[inM3Offset + 6];\n    outV2Buffer[outV2Offset + 1] = x * inM3Buffer[inM3Offset + 1] + y * inM3Buffer[inM3Offset + 4] + inM3Buffer[inM3Offset + 7];\n\n    return outV2Buffer;\n};\n\nMat3.bufferTransformVec2Dir = function(outV2Buffer, outV2Offset, inM3Buffer, inM3Offset, inV2Buffer, inV2Offset)\n{\n    var x = inV2Buffer[inV2Offset],\n        y = inV2Buffer[inV2Offset + 1];\n\n    outV2Buffer[outV2Offset] = x * inM3Buffer[inM3Offset] + y * inM3Buffer[inM3Offset + 3];\n    outV2Buffer[outV2Offset + 1] = x * inM3Buffer[inM3Offset + 1] + y * inM3Buffer[inM3Offset + 4];\n\n    return outV2Buffer;\n};\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar neo3d = require(\"./neo3d\");\n\nneo3d.Shader = require(\"./Shader\");\nneo3d.math = require(\"./math\");\nneo3d.Vec2 = require(\"./Vec2\");\nneo3d.Vec3 = require(\"./Vec3\");\nneo3d.Vec4 = require(\"./Vec4\");\nneo3d.Quat = require(\"./Quat\");\nneo3d.Mat2 = require(\"./Mat2\");\nneo3d.Mat3 = require(\"./Mat3\");\nneo3d.Mat4 = require(\"./Mat4\");\nneo3d.Mesh = require(\"./Mesh\");\nneo3d.PlaneMesh = require(\"./PlaneMesh\");\n\nwindow.neo3d = module.exports = neo3d;\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar neo3d = module.exports = {};\n\nvar _glSurfaces = [];\n\nvar GL_CTX_STATE = Object.freeze({\n    FIRST_INIT: 0,\n    CTX_LOST: 1,\n    NEED_INIT_AFTER_LOST: 2,\n    READY: 3\n});\n\nvar RenderingSurface = function(gl, rdr)\n{\n    //\"gl\" and \"rdr\" parameters are guaranteed to be valid.\n    if (gl.getExtension(\"OES_element_index_uint\"))\n    {\n        gl._bExtendedIndexType = true;\n    }\n\n    this._gl = gl;\n    this._rdr = rdr;\n    this._autoDraw = true;\n\n    this._lastDrawingBufferWidth = 0;\n    this._lastDrawingBufferHeight = 0;\n\n    this._glCtxState = GL_CTX_STATE.FIRST_INIT;\n\n    var that = this;\n    this._ctxLostListener = function(event)\n    {\n        event.preventDefault();\n        that._glCtxState = GL_CTX_STATE.CTX_LOST;\n\n        if (that._gl && that._gl._activeShader)\n        {\n            that._gl._activeShader.unbind();\n        }\n    };\n\n    this._ctxRestoredListener = function()\n    {\n        that._glCtxState = GL_CTX_STATE.NEED_INIT_AFTER_LOST;\n    };\n\n    gl.canvas.addEventListener(\"webglcontextlost\", this._ctxLostListener);\n    gl.canvas.addEventListener(\"webglcontextrestored\", this._ctxRestoredListener);\n};\n\nRenderingSurface.prototype.destroy = function()\n{\n    if (this._gl)\n    {\n        var canvas = this._gl.canvas;\n        canvas.removeEventListener(\"webglcontextlost\", this._ctxLostListener);\n        canvas.removeEventListener(\"webglcontextrestored\", this._ctxRestoredListener);\n\n        var size = _glSurfaces.length;\n        for (var i = 0; i < size; ++i)\n        {\n            if (_glSurfaces[i] === this)\n            {\n                _glSurfaces.splice(i, 1);\n                break;\n            }\n        }\n\n        this._gl = null;\n        this._rdr = null;\n\n        //Reset the detached canvas forcing a redraw\n        canvas.width++;\n        canvas.width--;\n    }\n};\n\nRenderingSurface.prototype._renderFrame = function(t)\n{\n    if (!this._gl || (this._glCtxState === GL_CTX_STATE.CTX_LOST))\n    {\n        return;\n    }\n\n    if (this._glCtxState !== GL_CTX_STATE.READY)\n    {\n        this._lastDrawingBufferWidth = 0;\n        this._lastDrawingBufferHeight = 0;\n        this._rdr.onInitContext(this._gl, (this._glCtxState === GL_CTX_STATE.NEED_INIT_AFTER_LOST));\n        this._glCtxState = GL_CTX_STATE.READY;\n    }\n\n    if ((this._lastDrawingBufferWidth !== this._gl.drawingBufferWidth) ||\n        (this._lastDrawingBufferHeight !== this._gl.drawingBufferHeight))\n    {\n        this._lastDrawingBufferWidth = this._gl.drawingBufferWidth;\n        this._lastDrawingBufferHeight = this._gl.drawingBufferHeight;\n        this._rdr.onSurfaceResized(this._gl, this._lastDrawingBufferWidth, this._lastDrawingBufferHeight);\n    }\n\n    this._rdr.onDrawFrame(this._gl, t);\n};\n\nvar _perfNow = window.performance ? (window.performance.now ||\n    window.performance.mozNow || window.performance.webkitNow ||\n    window.performance.oNow || window.performance.msNow ||\n    Date.now) : Date.now;\n\nRenderingSurface.prototype.drawSingleFrame = function()\n{\n    this._renderFrame(_perfNow());\n};\n\nRenderingSurface.prototype.setAutoDrawing = function(bEnable)\n{\n    this._autoDraw = bEnable ? true : false;\n};\n\nRenderingSurface.prototype.isAutoDrawing = function()\n{\n    return this._autoDraw;\n};\n\nvar _drawRequestID = 0;\nvar _lastDrawingTime = 0;\nvar _fps = 0;\n\nvar _requestAnimationFrame = window.requestAnimationFrame ||\n    window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||\n    window.oRequestAnimationFrame || window.msRequestAnimationFrame ||\n    function(cb)\n    {\n        return window.setTimeout(cb, 16);\n    };\n\nvar _cancelAnimationFrame = window.cancelAnimationFrame ||\n    window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame ||\n    window.oCancelAnimationFrame || window.msCancelAnimationFrame ||\n    function(id)\n    {\n        window.clearTimeout(id);\n    };\n\nfunction _continuousFrameDrawing(t)\n{\n    if (!_drawRequestID)\n    {\n        return;\n    }\n\n    if (_lastDrawingTime)\n    {\n        var dt = t - _lastDrawingTime;\n        if (dt > 0)\n        {\n            _fps = 0.9 * _fps + 100.0 / dt;\n        }\n    }\n    _lastDrawingTime = t;\n\n    var size = _glSurfaces.length;\n    for (var i = 0; i < size; ++i)\n    {\n        var rdrSurf = _glSurfaces[i];\n        if (rdrSurf._autoDraw)\n        {\n            try\n            {\n                rdrSurf._renderFrame(t);\n            }\n            catch (e)\n            {\n                window.console.warn(\"cannot draw GL frame on rendering surface #\" + i + \" (\" + e.message + \")\");\n            }\n        }\n    }\n\n    if (_drawRequestID)\n    {\n        _drawRequestID = _requestAnimationFrame(_continuousFrameDrawing);\n    }\n}\n\nneo3d.createRenderingSurface = function(canvas, rdr, bAntialias, bAlpha)\n{\n    if ((typeof (canvas) === \"string\") && canvas)\n    {\n        canvas = document.getElementById(canvas);\n    }\n\n    if (!(canvas instanceof HTMLCanvasElement) ||\n        !rdr || (typeof (rdr) !== \"object\") ||\n        (typeof (rdr.onInitContext) !== \"function\") ||\n        (typeof (rdr.onSurfaceResized) !== \"function\") ||\n        (typeof (rdr.onDrawFrame) !== \"function\"))\n    {\n        return null;\n    }\n\n    var size = _glSurfaces.length;\n    for (var i = 0; i < size; ++i)\n    {\n        if (_glSurfaces[i]._gl.canvas === canvas)\n        {\n            return null;\n        }\n    }\n\n    try\n    {\n        var gl = canvas.getContext(\"webgl\", { antialias: (bAntialias === true), alpha: (bAlpha === true) });\n        if (gl instanceof WebGLRenderingContext)\n        {\n            var rdrSurf = new RenderingSurface(gl, rdr);\n            _glSurfaces.push(rdrSurf);\n            return rdrSurf;\n        }\n    }\n    catch (e)\n    {\n        window.console.error(\"cannot fetch GL context (\" + e.message + \")\");\n    }\n\n    return null;\n};\n\nneo3d.findRenderingSurface = function(canvas)\n{\n    if ((typeof (canvas) === \"string\") && canvas)\n    {\n        canvas = document.getElementById(canvas);\n    }\n\n    if (canvas instanceof HTMLCanvasElement)\n    {\n        var size = _glSurfaces.length;\n        for (var i = 0; i < size; ++i)\n        {\n            var rdrSurf = _glSurfaces[i];\n            if (rdrSurf._gl.canvas === canvas)\n            {\n                return rdrSurf;\n            }\n        }\n    }\n\n    return null;\n};\n\nneo3d.startDrawing = function()\n{\n    if (!_drawRequestID)\n    {\n        _drawRequestID = _requestAnimationFrame(_continuousFrameDrawing);\n    }\n};\n\nneo3d.stopDrawing = function()\n{\n    if (_drawRequestID)\n    {\n        _cancelAnimationFrame(_drawRequestID);\n        _drawRequestID = 0;\n        _lastDrawingTime = 0;\n        _fps = 0;\n    }\n};\n\nneo3d.isDrawing = function()\n{\n    return _drawRequestID ? true : false;\n};\n\nneo3d.getFPS = function()\n{\n    return _fps;\n};\n\nneo3d.load2DTexture = function(gl, data, noRepeat, noMipmap)\n{\n    //TODO: move to a separated Texture class\n    if ((gl instanceof WebGLRenderingContext) &&\n        (((data instanceof HTMLImageElement) && data.complete) ||\n            (data instanceof ImageData) ||\n            (data instanceof HTMLCanvasElement)))\n    {\n        var tex = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, tex);\n\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        try\n        {\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);\n        }\n        catch (e)\n        {\n            gl.bindTexture(gl.TEXTURE_2D, null);\n            gl.deleteTexture(tex);\n            window.console.warn(\"cannot transfer texture data (\" + e.message + \")\");\n            return null;\n        }\n\n        var param = gl.REPEAT;\n        if (noRepeat)\n        {\n            param = gl.CLAMP_TO_EDGE;\n        }\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, param);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, param);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        if (noMipmap)\n        {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        }\n        else\n        {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n            gl.generateMipmap(gl.TEXTURE_2D);\n        }\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n\n        var error = gl.getError();\n        if (error !== gl.NO_ERROR)\n        {\n            if (error !== gl.CONTEXT_LOST_WEBGL)\n            {\n                window.console.warn(\"cannot load 2D texture (err: #\" + error + \")\");\n                gl.deleteTexture(tex);\n            }\n\n            tex = null;\n        }\n\n        return tex;\n    }\n\n    return null;\n};\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar Mesh = require(\"./Mesh\");\n\nvar Shader = module.exports = function(vtxSrc, fragSrc)\n{\n    this._prog = null;\n    this._gl = null;\n    this._lastDrawnMesh = null;\n    this._overridenPrimitiveType = Mesh.PRIMITIVE_TYPE.NO_PRIMITIVE;\n\n    if (vtxSrc && (typeof (vtxSrc) === \"string\") &&\n        fragSrc && (typeof (fragSrc) === \"string\"))\n    {\n        this._vtxSrc = vtxSrc;\n        this._fragSrc = fragSrc;\n    }\n    else\n    {\n        this._vtxSrc = this._fragSrc = null;\n    }\n};\n\nShader.prototype._initShaderLocations = function()\n{\n    //Override this method to init shader uniforms and attribs locations.\n    //this._gl and this._prog are guaranteed to be valid.\n};\n\nShader.prototype._bindShader = function()\n{\n    //Override this method to configure shader before usage.\n    //this._gl and this._prog are guaranteed to be valid and this shader\n    //program is in use.\n    //Returns true on success or false on failure.\n    //If returning false, this._unbindShader() will be systematically called\n    //for cleanup.\n    return true;\n};\n\nShader.prototype._unbindShader = function()\n{\n    //Override this method to cleanup shader configuration after usage.\n    //this._gl is guaranteed to be valid and this shader program is still in\n    //use if OpenGL context has not been lost (call this._gl.isContextLost()\n    //for state information).\n    //WARNING: this._prog may not be valid.\n};\n\nShader.prototype._bindMeshAttribs = function(/*mesh*/)\n{\n    //Override this method to bind mesh vertex-attribs buffers to this shader\n    //program (see: Mesh#bindAttribBuffer() method).\n    //this._gl is guaranteed to be valid and this shader program is in use.\n    //\"mesh\" parameter is guaranteed to be a valid Mesh with the same\n    //OpenGL context.\n    //Returns true if all vertex-attribs buffers needed by this shader are\n    //correctly bound or false on error.\n    //If returning false, the provided \"mesh\" will not be drawn.\n    return true;\n};\n\nfunction _loadShader(gl, type, src)\n{\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n    {\n        if (!gl.isContextLost())\n        {\n            window.console.warn(\"cannot compile shader:\\n\" + gl.getShaderInfoLog(shader));\n            gl.deleteShader(shader);\n        }\n\n        shader = null;\n    }\n\n    return shader;\n}\n\nfunction _linkProgram(gl, vtxShader, fragShader)\n{\n    var prog = gl.createProgram();\n    gl.attachShader(prog, vtxShader);\n    gl.attachShader(prog, fragShader);\n    gl.linkProgram(prog);\n\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS))\n    {\n        if (!gl.isContextLost())\n        {\n            window.console.warn(\"cannot link program:\\n\" + gl.getProgramInfoLog(prog));\n            gl.deleteProgram(prog);\n        }\n\n        prog = null;\n    }\n\n    return prog;\n}\n\nShader.prototype.init = function(gl, bContextLost)\n{\n    if (!this._vtxSrc || !this._fragSrc ||\n        !(gl instanceof WebGLRenderingContext) || gl.isContextLost() ||\n        (this._gl && (this._gl !== gl)))\n    {\n        return false;\n    }\n\n    if (bContextLost)\n    {\n        this._prog = null;\n        this.unbind();\n    }\n    else if (this._prog)\n    {\n        return true;\n    }\n\n    var vtxShader = _loadShader(gl, gl.VERTEX_SHADER, this._vtxSrc);\n    if (vtxShader)\n    {\n        var fragShader = _loadShader(gl, gl.FRAGMENT_SHADER, this._fragSrc);\n        if (fragShader)\n        {\n            this._prog = _linkProgram(gl, vtxShader, fragShader);\n\n            //Flag vertex and fragment shaders for deletion, so they\n            //will be automatically deleted with the program\n            gl.deleteShader(vtxShader);\n            gl.deleteShader(fragShader);\n\n            if (this._prog)\n            {\n                this._gl = gl;\n                this._initShaderLocations();\n                return true;\n            }\n        }\n        else\n        {\n            gl.deleteShader(vtxShader);\n        }\n    }\n\n    return false;\n};\n\nShader.prototype.shut = function()\n{\n    this.unbind();\n\n    if (this._prog && !this._gl.isContextLost())\n    {\n        this._gl.deleteProgram(this._prog);\n    }\n\n    this._prog = null;\n    this._gl = null;\n};\n\nShader.prototype.bind = function()\n{\n    if (!this._prog || this._gl.isContextLost())\n    {\n        return false;\n    }\n\n    if (this._gl._activeShader === this)\n    {\n        return true;\n    }\n\n    if (this._gl._activeShader)\n    {\n        this._gl._activeShader.unbind();\n    }\n\n    this._gl.useProgram(this._prog);\n    if (this._bindShader())\n    {\n        this._gl._activeShader = this;\n        return true;\n    }\n    else\n    {\n        this._unbindShader();\n        this._gl.useProgram(null);\n        return false;\n    }\n};\n\nShader.prototype.unbind = function()\n{\n    if (this._gl && (this._gl._activeShader === this))\n    {\n        this._gl._activeShader = null;\n\n        this._unbindShader();\n\n        if (!this._gl.isContextLost())\n        {\n            this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, null);\n            this._gl.useProgram(null);\n        }\n    }\n\n    this._lastDrawnMesh = null;\n};\n\nShader.prototype.isBound = function()\n{\n    return (this._gl && (this._gl._activeShader === this));\n};\n\nShader.getActiveShader = function(gl)\n{\n    if ((gl instanceof WebGLRenderingContext) &&\n        (gl._activeShader instanceof Shader))\n    {\n        return gl._activeShader;\n    }\n    else\n    {\n        return null;\n    }\n};\n\nShader.prototype.drawMesh = function(mesh, firstPointIndex, nbPoints)\n{\n    if (this._gl && (this._gl._activeShader === this) &&\n        !this._gl.isContextLost() &&\n        (mesh instanceof Mesh) && mesh.isReady(this._gl))\n    {\n        if (mesh !== this._lastDrawnMesh)\n        {\n            if (this._bindMeshAttribs(mesh))\n            {\n                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, null);\n                this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, mesh.getIndexVBO());\n                this._lastDrawnMesh = mesh;\n            }\n            else\n            {\n                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, null);\n                this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, null);\n                this._lastDrawnMesh = null;\n                return false;\n            }\n        }\n\n        var primitiveType = this._overridenPrimitiveType;\n        if (primitiveType === Mesh.PRIMITIVE_TYPE.NO_PRIMITIVE)\n        {\n            primitiveType = mesh.getPrimitiveType();\n        }\n\n        switch (primitiveType)\n        {\n            case Mesh.PRIMITIVE_TYPE.POINTS:\n                primitiveType = this._gl.POINTS;\n                break;\n\n            case Mesh.PRIMITIVE_TYPE.LINES:\n                primitiveType = this._gl.LINES;\n                break;\n\n            case Mesh.PRIMITIVE_TYPE.LINE_STRIP:\n                primitiveType = this._gl.LINE_STRIP;\n                break;\n\n            case Mesh.PRIMITIVE_TYPE.LINE_LOOP:\n                primitiveType = this._gl.LINE_LOOP;\n                break;\n\n            case Mesh.PRIMITIVE_TYPE.TRIANGLES:\n                primitiveType = this._gl.TRIANGLES;\n                break;\n\n            case Mesh.PRIMITIVE_TYPE.TRIANGLE_STRIP:\n                primitiveType = this._gl.TRIANGLE_STRIP;\n                break;\n\n            case Mesh.PRIMITIVE_TYPE.TRIANGLE_FAN:\n                primitiveType = this._gl.TRIANGLE_FAN;\n                break;\n\n            default:\n                return false;\n        }\n\n        if (typeof (firstPointIndex) === \"number\")\n        {\n            if (firstPointIndex < 0)\n            {\n                firstPointIndex = 0;\n            }\n        }\n        else\n        {\n            firstPointIndex = 0;\n        }\n\n        var maxPoints = mesh.getPointCount() - firstPointIndex;\n        if (typeof (nbPoints) === \"number\")\n        {\n            if (nbPoints > maxPoints)\n            {\n                nbPoints = maxPoints;\n            }\n        }\n        else\n        {\n            nbPoints = maxPoints;\n        }\n\n        if (nbPoints <= 0)\n        {\n            return true;\n        }\n\n        var indexType = mesh.getIndexType();\n        switch (indexType)\n        {\n            case Mesh.INDEX_TYPE.NO_INDEX:\n                this._gl.drawArrays(primitiveType, firstPointIndex, nbPoints);\n                break;\n\n            case Mesh.INDEX_TYPE.UNSIGNED_SHORT:\n                this._gl.drawElements(primitiveType, nbPoints, this._gl.UNSIGNED_SHORT, firstPointIndex * 2);\n                break;\n\n            case Mesh.INDEX_TYPE.UNSIGNED_INT:\n                this._gl.drawElements(primitiveType, nbPoints, this._gl.UNSIGNED_INT, firstPointIndex * 4);\n                break;\n\n            default:\n                return false;\n        }\n\n        return true;\n    }\n\n    return false;\n};\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar math = require(\"./math\");\n\nvar Vec2 = module.exports = function()\n{\n    //Always initialized to 0\n    this.buffer = new Float32Array(2);\n};\n\nVec2.prototype.setFromValues = function(x, y)\n{\n    this.buffer[0] = x;\n    this.buffer[1] = y;\n\n    return this;\n};\n\nVec2.prototype.setFromArray = function(arr)\n{\n    this.buffer[0] = arr[0];\n    this.buffer[1] = arr[1];\n\n    return this;\n};\n\nVec2.prototype.setNull = function()\n{\n    this.buffer[0] = this.buffer[1] = 0.0;\n    return this;\n};\n\nVec2.prototype.setOne = function()\n{\n    this.buffer[0] = this.buffer[1] = 1.0;\n    return this;\n};\n\nVec2.prototype.copy = function(v2)\n{\n    this.buffer[0] = v2.buffer[0];\n    this.buffer[1] = v2.buffer[1];\n\n    return this;\n};\n\nVec2.prototype.isNull = function()\n{\n    return Vec2.bufferIsNull(this.buffer, 0);\n};\n\nVec2.prototype.equals = function(v2)\n{\n    return Vec2.bufferEquals(this.buffer, 0, v2.buffer, 0);\n};\n\nVec2.prototype.add = function(v2A, v2B)\n{\n    Vec2.bufferAdd(this.buffer, 0, v2A.buffer, 0, v2B.buffer, 0);\n    return this;\n};\n\nVec2.prototype.addInPlace = function(v2)\n{\n    Vec2.bufferAddInPlace(this.buffer, 0, v2.buffer, 0);\n    return this;\n};\n\nVec2.prototype.substract = function(v2A, v2B)\n{\n    Vec2.bufferSubstract(this.buffer, 0, v2A.buffer, 0, v2B.buffer, 0);\n    return this;\n};\n\nVec2.prototype.substractInPlace = function(v2)\n{\n    Vec2.bufferSubstractInPlace(this.buffer, 0, v2.buffer, 0);\n    return this;\n};\n\nVec2.prototype.scale = function(scale, v2)\n{\n    Vec2.bufferScale(this.buffer, 0, scale, v2.buffer, 0);\n    return this;\n};\n\nVec2.prototype.scaleInPlace = function(scale)\n{\n    Vec2.bufferScaleInPlace(this.buffer, 0, scale);\n    return this;\n};\n\nVec2.prototype.addScaled = function(v2A, scale, v2B)\n{\n    Vec2.bufferAddScaled(this.buffer, 0, v2A.buffer, 0, scale, v2B.buffer, 0);\n    return this;\n};\n\nVec2.prototype.addScaledInPlace = function(scale, v2)\n{\n    Vec2.bufferAddScaledInPlace(this.buffer, 0, scale, v2.buffer, 0);\n    return this;\n};\n\nVec2.prototype.negate = function(v2)\n{\n    Vec2.bufferNegate(this.buffer, 0, v2.buffer, 0);\n    return this;\n};\n\nVec2.prototype.negateInPlace = function()\n{\n    Vec2.bufferNegate(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nVec2.prototype.squareDistance = function(v2)\n{\n    return Vec2.bufferSquareDistance(this.buffer, 0, v2.buffer, 0);\n};\n\nVec2.prototype.distance = function(v2)\n{\n    return Vec2.bufferDistance(this.buffer, 0, v2.buffer, 0);\n};\n\nVec2.prototype.squareNorm = function()\n{\n    return Vec2.bufferSquareNorm(this.buffer, 0);\n};\n\nVec2.prototype.norm = function()\n{\n    return Vec2.bufferNorm(this.buffer, 0);\n};\n\nVec2.prototype.normalize = function(v2)\n{\n    Vec2.bufferNormalize(this.buffer, 0, v2.buffer, 0);\n    return this;\n};\n\nVec2.prototype.normalizeInPlace = function()\n{\n    Vec2.bufferNormalize(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nVec2.prototype.dotProduct = function(v2)\n{\n    return Vec2.bufferDotProduct(this.buffer, 0, v2.buffer, 0);\n};\n\nVec2.prototype.shortestAngle = function(v2)\n{\n    return Vec2.bufferShortestAngle(this.buffer, 0, v2.buffer, 0);\n};\n\nVec2.prototype.isPerpendicular = function(v2)\n{\n    return Vec2.bufferArePerpendicular(this.buffer, 0, v2.buffer, 0);\n};\n\nVec2.prototype.isColinear = function(v2)\n{\n    return Vec2.bufferAreColinear(this.buffer, 0, v2.buffer, 0);\n};\n\nVec2.prototype.linear = function(p0, t, p1)\n{\n    Vec2.bufferLinear(this.buffer, 0, p0.buffer, 0, t, p1.buffer, 0);\n    return this;\n};\n\nVec2.prototype.quadratic = function(p0, p1, t, p2)\n{\n    Vec2.bufferQuadratic(this.buffer, 0, p0.buffer, 0, p1.buffer, 0, t, p2.buffer, 0);\n    return this;\n};\n\nVec2.prototype.hermite = function(tan0, p0, t, p1, tan1)\n{\n    Vec2.bufferHermite(this.buffer, 0, tan0.buffer, 0, p0.buffer, 0, t, p1.buffer, 0, tan1.buffer, 0);\n    return this;\n};\n\nVec2.prototype.bezier = function(ctrl0, p0, t, p1, ctrl1)\n{\n    Vec2.bufferBezier(this.buffer, 0, ctrl0.buffer, 0, p0.buffer, 0, t, p1.buffer, 0, ctrl1.buffer, 0);\n    return this;\n};\n\nVec2.prototype.catmullRom = function(p0, p1, t, p2, p3)\n{\n    Vec2.bufferCatmullRom(this.buffer, 0, p0.buffer, 0, p1.buffer, 0, t, p2.buffer, 0, p3.buffer, 0);\n    return this;\n};\n\n//MUST be considered as constants\nVec2.NB_COMPONENTS = 2;\nVec2.I = new Vec2().setFromValues(1.0, 0.0);\nVec2.J = new Vec2().setFromValues(0.0, 1.0);\n\nVec2.createBuffer = function(nbElems)\n{\n    //Always initialized to 0\n    return new Float32Array(2 * nbElems);\n};\n\nVec2.bufferIsNull = function(inBuffer, inOffset)\n{\n    return ((math.abs(inBuffer[inOffset]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 1]) < math.EPSILON));\n};\n\nVec2.bufferEquals = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    return (((inBufferA === inBufferB) && (inOffsetA === inOffsetB)) ||\n        ((math.abs(inBufferB[inOffsetB] - inBufferA[inOffsetA]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1]) < math.EPSILON)));\n};\n\nVec2.bufferAdd = function(outBuffer, outOffset, inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    outBuffer[outOffset] = inBufferA[inOffsetA] + inBufferB[inOffsetB];\n    outBuffer[outOffset + 1] = inBufferA[inOffsetA + 1] + inBufferB[inOffsetB + 1];\n\n    return outBuffer;\n};\n\nVec2.bufferAddInPlace = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    outBuffer[outOffset] += inBuffer[inOffset];\n    outBuffer[outOffset + 1] += inBuffer[inOffset + 1];\n\n    return outBuffer;\n};\n\nVec2.bufferSubstract = function(outBuffer, outOffset, inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    outBuffer[outOffset] = inBufferA[inOffsetA] - inBufferB[inOffsetB];\n    outBuffer[outOffset + 1] = inBufferA[inOffsetA + 1] - inBufferB[inOffsetB + 1];\n\n    return outBuffer;\n};\n\nVec2.bufferSubstractInPlace = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    outBuffer[outOffset] -= inBuffer[inOffset];\n    outBuffer[outOffset + 1] -= inBuffer[inOffset + 1];\n\n    return outBuffer;\n};\n\nVec2.bufferScale = function(outBuffer, outOffset, scale, inBuffer, inOffset)\n{\n    outBuffer[outOffset] = scale * inBuffer[inOffset];\n    outBuffer[outOffset + 1] = scale * inBuffer[inOffset + 1];\n\n    return outBuffer;\n};\n\nVec2.bufferScaleInPlace = function(outBuffer, outOffset, scale)\n{\n    outBuffer[outOffset] *= scale;\n    outBuffer[outOffset + 1] *= scale;\n\n    return outBuffer;\n};\n\nVec2.bufferAddScaled = function(outBuffer, outOffset, inBufferA, inOffsetA, scale, inBufferB, inOffsetB)\n{\n    outBuffer[outOffset] = inBufferA[inOffsetA] + scale * inBufferB[inOffsetB];\n    outBuffer[outOffset + 1] = inBufferA[inOffsetA + 1] + scale * inBufferB[inOffsetB + 1];\n\n    return outBuffer;\n};\n\nVec2.bufferAddScaledInPlace = function(outBuffer, outOffset, scale, inBuffer, inOffset)\n{\n    outBuffer[outOffset] += scale * inBuffer[inOffset];\n    outBuffer[outOffset + 1] += scale * inBuffer[inOffset + 1];\n\n    return outBuffer;\n};\n\nVec2.bufferNegate = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    outBuffer[outOffset] = -inBuffer[inOffset];\n    outBuffer[outOffset + 1] = -inBuffer[inOffset + 1];\n\n    return outBuffer;\n};\n\nVec2.bufferSquareDistance = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var x = inBufferB[inOffsetB] - inBufferA[inOffsetA],\n        y = inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1];\n\n    return x * x + y * y;\n};\n\nVec2.bufferDistance = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var x = inBufferB[inOffsetB] - inBufferA[inOffsetA],\n        y = inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1];\n\n    return math.sqrt(x * x + y * y);\n};\n\nVec2.bufferSquareNorm = function(inBuffer, inOffset)\n{\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1];\n\n    return x * x + y * y;\n};\n\nVec2.bufferNorm = function(inBuffer, inOffset)\n{\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1];\n\n    return math.sqrt(x * x + y * y);\n};\n\nVec2.bufferNormalize = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        n = x * x + y * y;\n\n    if (n < math.EPSILON2)\n    {\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = 0.0;\n        return outBuffer;\n    }\n\n    n = 1.0 / math.sqrt(n);\n    outBuffer[outOffset] = x * n;\n    outBuffer[outOffset + 1] = y * n;\n\n    return outBuffer;\n};\n\nVec2.bufferDotProduct = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    return inBufferA[inOffsetA] * inBufferB[inOffsetB] +\n        inBufferA[inOffsetA + 1] * inBufferB[inOffsetB + 1];\n};\n\nVec2.bufferShortestAngle = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var xa = inBufferA[inOffsetA],\n        ya = inBufferA[inOffsetA + 1],\n        na = xa * xa + ya * ya;\n\n    if (na < math.EPSILON2)\n    {\n        return 0.0;\n    }\n\n    var xb = inBufferB[inOffsetB],\n        yb = inBufferB[inOffsetB + 1],\n        nb = xb * xb + yb * yb;\n\n    if (nb < math.EPSILON2)\n    {\n        return 0.0;\n    }\n\n    var dot = xa * xb + ya * yb;\n    if (math.abs(dot) < math.EPSILON)\n    {\n        return math.HALF_PI;\n    }\n\n    dot /= math.sqrt(na * nb);\n    if (dot > 1.0 - math.EPSILON)\n    {\n        return 0.0;\n    }\n    else if (dot < math.EPSILON - 1.0)\n    {\n        return math.PI;\n    }\n    else\n    {\n        return math.acos(dot);\n    }\n};\n\nVec2.bufferArePerpendicular = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var xa = inBufferA[inOffsetA],\n        ya = inBufferA[inOffsetA + 1],\n        xb = inBufferB[inOffsetB],\n        yb = inBufferB[inOffsetB + 1];\n\n    return (((math.abs(xa) >= math.EPSILON) ||\n        (math.abs(ya) >= math.EPSILON)) &&\n        ((math.abs(xb) >= math.EPSILON) ||\n            (math.abs(yb) >= math.EPSILON)) &&\n        (math.abs(xa * xb + ya * yb) < math.EPSILON));\n};\n\nVec2.bufferAreColinear = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var xa = inBufferA[inOffsetA],\n        ya = inBufferA[inOffsetA + 1],\n        xb = inBufferB[inOffsetB],\n        yb = inBufferB[inOffsetB + 1];\n\n    return (((math.abs(xa) >= math.EPSILON) ||\n        (math.abs(ya) >= math.EPSILON)) &&\n        ((math.abs(xb) >= math.EPSILON) ||\n            (math.abs(yb) >= math.EPSILON)) &&\n        (math.abs(xa * yb - xb * ya) < math.EPSILON));\n};\n\nVec2.bufferLinear = function(outBuffer, outOffset, inBufferP0, inOffsetP0, t, inBufferP1, inOffsetP1)\n{\n    var x = inBufferP0[inOffsetP0],\n        y = inBufferP0[inOffsetP0 + 1];\n\n    outBuffer[outOffset] = x + t * (inBufferP1[inOffsetP1] - x);\n    outBuffer[outOffset + 1] = y + t * (inBufferP1[inOffsetP1 + 1] - y);\n\n    return outBuffer;\n};\n\nVec2.bufferQuadratic = function(outBuffer, outOffset, inBufferP0, inOffsetP0, inBufferP1, inOffsetP1, t, inBufferP2, inOffsetP2)\n{\n    //Interpolation is between points P1 and P2\n    var f0 = 0.5 * (t - 1.0) * t,\n        f1 = 1.0 - t * t,\n        f2 = 0.5 * (t + 1.0) * t;\n\n    outBuffer[outOffset] = f0 * inBufferP0[inOffsetP0] + f1 * inBufferP1[inOffsetP1] + f2 * inBufferP2[inOffsetP2];\n    outBuffer[outOffset + 1] = f0 * inBufferP0[inOffsetP0 + 1] + f1 * inBufferP1[inOffsetP1 + 1] + f2 * inBufferP2[inOffsetP2 + 1];\n\n    return outBuffer;\n};\n\nVec2.bufferHermite = function(outBuffer, outOffset, inBufferT0, inOffsetT0, inBufferP0, inOffsetP0, t, inBufferP1, inOffsetP1, inBufferT1, inOffsetT1)\n{\n    //Ti is the tangent at point Pi\n    var tt = t * t,\n        f0 = tt * (t - 2.0) + t,\n        f1 = tt * (2.0 * t - 3.0) + 1.0,\n        f2 = tt * (3.0 - 2.0 * t),\n        f3 = tt * (t - 1.0);\n\n    outBuffer[outOffset] = f0 * inBufferT0[inOffsetT0] + f1 * inBufferP0[inOffsetP0] + f2 * inBufferP1[inOffsetP1] + f3 * inBufferT1[inOffsetT1];\n    outBuffer[outOffset + 1] = f0 * inBufferT0[inOffsetT0 + 1] + f1 * inBufferP0[inOffsetP0 + 1] + f2 * inBufferP1[inOffsetP1 + 1] + f3 * inBufferT1[inOffsetT1 + 1];\n\n    return outBuffer;\n};\n\nVec2.bufferBezier = function(outBuffer, outOffset, inBufferC0, inOffsetC0, inBufferP0, inOffsetP0, t, inBufferP1, inOffsetP1, inBufferC1, inOffsetC1)\n{\n    //Ci is the control point at point Pi\n    //Bezier interpolation is a special Hermite interpolation with:\n    //T0 = 3 * (C0 - P0)\n    //T1 = 3 * (P1 - C1)\n    var tt = t * t,\n        lessT = 1.0 - t,\n        lessT2 = lessT * lessT,\n        f0 = 3.0 * lessT2 * t,\n        f1 = lessT2 * lessT,\n        f2 = tt * t,\n        f3 = 3.0 * lessT * tt;\n\n    outBuffer[outOffset] = f0 * inBufferC0[inOffsetC0] + f1 * inBufferP0[inOffsetP0] + f2 * inBufferP1[inOffsetP1] + f3 * inBufferC1[inOffsetC1];\n    outBuffer[outOffset + 1] = f0 * inBufferC0[inOffsetC0 + 1] + f1 * inBufferP0[inOffsetP0 + 1] + f2 * inBufferP1[inOffsetP1 + 1] + f3 * inBufferC1[inOffsetC1 + 1];\n\n    return outBuffer;\n};\n\nVec2.bufferCatmullRom = function(outBuffer, outOffset, inBufferP0, inOffsetP0, inBufferP1, inOffsetP1, t, inBufferP2, inOffsetP2, inBufferP3, inOffsetP3)\n{\n    //Interpolation is between points P1 and P2\n    //Catmull-Rom interpolation is a special Hermite interpolation with:\n    //Ti = 0.5 * (Pi+1 - Pi-1)\n    var tt = t * t,\n        lessHalfT = -0.5 * t,\n        f0 = lessHalfT * (tt + 1.0) + tt,\n        f1 = lessHalfT * (5.0 * t - 3.0 * tt) + 1.0,\n        f2 = lessHalfT * (3.0 * tt - 4.0 * t - 1.0),\n        f3 = lessHalfT * (t - tt);\n\n    outBuffer[outOffset] = f0 * inBufferP0[inOffsetP0] + f1 * inBufferP1[inOffsetP1] + f2 * inBufferP2[inOffsetP2] + f3 * inBufferP3[inOffsetP3];\n    outBuffer[outOffset + 1] = f0 * inBufferP0[inOffsetP0 + 1] + f1 * inBufferP1[inOffsetP1 + 1] + f2 * inBufferP2[inOffsetP2 + 1] + f3 * inBufferP3[inOffsetP3 + 1];\n\n    return outBuffer;\n};\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar math = require(\"./math\");\n\nvar Vec3 = module.exports = function()\n{\n    //Always initialized to 0\n    this.buffer = new Float32Array(3);\n};\n\nVec3.prototype.setFromValues = function(x, y, z)\n{\n    this.buffer[0] = x;\n    this.buffer[1] = y;\n    this.buffer[2] = z;\n\n    return this;\n};\n\nVec3.prototype.setFromArray = function(arr)\n{\n    this.buffer[0] = arr[0];\n    this.buffer[1] = arr[1];\n    this.buffer[2] = arr[2];\n\n    return this;\n};\n\nVec3.prototype.setFromVec2Pos = function(v2)\n{\n    this.buffer[0] = v2.buffer[0];\n    this.buffer[1] = v2.buffer[1];\n    this.buffer[2] = 1.0;\n\n    return this;\n};\n\nVec3.prototype.setFromVec2Dir = function(v2)\n{\n    this.buffer[0] = v2.buffer[0];\n    this.buffer[1] = v2.buffer[1];\n    this.buffer[2] = 0.0;\n\n    return this;\n};\n\nVec3.prototype.setNull = function()\n{\n    this.buffer[0] = this.buffer[1] = this.buffer[2] = 0.0;\n    return this;\n};\n\nVec3.prototype.setOne = function()\n{\n    this.buffer[0] = this.buffer[1] = this.buffer[2] = 1.0;\n    return this;\n};\n\nVec3.prototype.copy = function(v3)\n{\n    this.buffer[0] = v3.buffer[0];\n    this.buffer[1] = v3.buffer[1];\n    this.buffer[2] = v3.buffer[2];\n\n    return this;\n};\n\nVec3.prototype.isNull = function()\n{\n    return Vec3.bufferIsNull(this.buffer, 0);\n};\n\nVec3.prototype.equals = function(v3)\n{\n    return Vec3.bufferEquals(this.buffer, 0, v3.buffer, 0);\n};\n\nVec3.prototype.add = function(v3A, v3B)\n{\n    Vec3.bufferAdd(this.buffer, 0, v3A.buffer, 0, v3B.buffer, 0);\n    return this;\n};\n\nVec3.prototype.addInPlace = function(v3)\n{\n    Vec3.bufferAddInPlace(this.buffer, 0, v3.buffer, 0);\n    return this;\n};\n\nVec3.prototype.substract = function(v3A, v3B)\n{\n    Vec3.bufferSubstract(this.buffer, 0, v3A.buffer, 0, v3B.buffer, 0);\n    return this;\n};\n\nVec3.prototype.substractInPlace = function(v3)\n{\n    Vec3.bufferSubstractInPlace(this.buffer, 0, v3.buffer, 0);\n    return this;\n};\n\nVec3.prototype.scale = function(scale, v3)\n{\n    Vec3.bufferScale(this.buffer, 0, scale, v3.buffer, 0);\n    return this;\n};\n\nVec3.prototype.scaleInPlace = function(scale)\n{\n    Vec3.bufferScaleInPlace(this.buffer, 0, scale);\n    return this;\n};\n\nVec3.prototype.addScaled = function(v3A, scale, v3B)\n{\n    Vec3.bufferAddScaled(this.buffer, 0, v3A.buffer, 0, scale, v3B.buffer, 0);\n    return this;\n};\n\nVec3.prototype.addScaledInPlace = function(scale, v3)\n{\n    Vec3.bufferAddScaledInPlace(this.buffer, 0, scale, v3.buffer, 0);\n    return this;\n};\n\nVec3.prototype.negate = function(v3)\n{\n    Vec3.bufferNegate(this.buffer, 0, v3.buffer, 0);\n    return this;\n};\n\nVec3.prototype.negateInPlace = function()\n{\n    Vec3.bufferNegate(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nVec3.prototype.squareDistance = function(v3)\n{\n    return Vec3.bufferSquareDistance(this.buffer, 0, v3.buffer, 0);\n};\n\nVec3.prototype.distance = function(v3)\n{\n    return Vec3.bufferDistance(this.buffer, 0, v3.buffer, 0);\n};\n\nVec3.prototype.squareNorm = function()\n{\n    return Vec3.bufferSquareNorm(this.buffer, 0);\n};\n\nVec3.prototype.norm = function()\n{\n    return Vec3.bufferNorm(this.buffer, 0);\n};\n\nVec3.prototype.normalize = function(v3)\n{\n    Vec3.bufferNormalize(this.buffer, 0, v3.buffer, 0);\n    return this;\n};\n\nVec3.prototype.normalizeInPlace = function()\n{\n    Vec3.bufferNormalize(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nVec3.prototype.dotProduct = function(v3)\n{\n    return Vec3.bufferDotProduct(this.buffer, 0, v3.buffer, 0);\n};\n\nVec3.prototype.crossProduct = function(v3A, v3B)\n{\n    Vec3.bufferCrossProduct(this.buffer, 0, v3A.buffer, 0, v3B.buffer, 0);\n    return this;\n};\n\nVec3.prototype.crossProductInPlace = function(v3)\n{\n    Vec3.bufferCrossProduct(this.buffer, 0, this.buffer, 0, v3.buffer, 0);\n    return this;\n};\n\nVec3.prototype.shortestAngle = function(v3)\n{\n    return Vec3.bufferShortestAngle(this.buffer, 0, v3.buffer, 0);\n};\n\nVec3.prototype.isPerpendicular = function(v3)\n{\n    return Vec3.bufferArePerpendicular(this.buffer, 0, v3.buffer, 0);\n};\n\nVec3.prototype.isColinear = function(v3)\n{\n    return Vec3.bufferAreColinear(this.buffer, 0, v3.buffer, 0);\n};\n\nVec3.prototype.linear = function(p0, t, p1)\n{\n    Vec3.bufferLinear(this.buffer, 0, p0.buffer, 0, t, p1.buffer, 0);\n    return this;\n};\n\nVec3.prototype.quadratic = function(p0, p1, t, p2)\n{\n    Vec3.bufferQuadratic(this.buffer, 0, p0.buffer, 0, p1.buffer, 0, t, p2.buffer, 0);\n    return this;\n};\n\nVec3.prototype.hermite = function(tan0, p0, t, p1, tan1)\n{\n    Vec3.bufferHermite(this.buffer, 0, tan0.buffer, 0, p0.buffer, 0, t, p1.buffer, 0, tan1.buffer, 0);\n    return this;\n};\n\nVec3.prototype.bezier = function(ctrl0, p0, t, p1, ctrl1)\n{\n    Vec3.bufferBezier(this.buffer, 0, ctrl0.buffer, 0, p0.buffer, 0, t, p1.buffer, 0, ctrl1.buffer, 0);\n    return this;\n};\n\nVec3.prototype.catmullRom = function(p0, p1, t, p2, p3)\n{\n    Vec3.bufferCatmullRom(this.buffer, 0, p0.buffer, 0, p1.buffer, 0, t, p2.buffer, 0, p3.buffer, 0);\n    return this;\n};\n\n//MUST be considered as constants\nVec3.NB_COMPONENTS = 3;\nVec3.I = new Vec3().setFromValues(1.0, 0.0, 0.0);\nVec3.J = new Vec3().setFromValues(0.0, 1.0, 0.0);\nVec3.K = new Vec3().setFromValues(0.0, 0.0, 1.0);\n\nVec3.createBuffer = function(nbElems)\n{\n    //Always initialized to 0\n    return new Float32Array(3 * nbElems);\n};\n\nVec3.bufferIsNull = function(inBuffer, inOffset)\n{\n    return ((math.abs(inBuffer[inOffset]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 1]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 2]) < math.EPSILON));\n};\n\nVec3.bufferEquals = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    return (((inBufferA === inBufferB) && (inOffsetA === inOffsetB)) ||\n        ((math.abs(inBufferB[inOffsetB] - inBufferA[inOffsetA]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 2] - inBufferA[inOffsetA + 2]) < math.EPSILON)));\n};\n\nVec3.bufferAdd = function(outBuffer, outOffset, inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    outBuffer[outOffset] = inBufferA[inOffsetA] + inBufferB[inOffsetB];\n    outBuffer[outOffset + 1] = inBufferA[inOffsetA + 1] + inBufferB[inOffsetB + 1];\n    outBuffer[outOffset + 2] = inBufferA[inOffsetA + 2] + inBufferB[inOffsetB + 2];\n\n    return outBuffer;\n};\n\nVec3.bufferAddInPlace = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    outBuffer[outOffset] += inBuffer[inOffset];\n    outBuffer[outOffset + 1] += inBuffer[inOffset + 1];\n    outBuffer[outOffset + 2] += inBuffer[inOffset + 2];\n\n    return outBuffer;\n};\n\nVec3.bufferSubstract = function(outBuffer, outOffset, inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    outBuffer[outOffset] = inBufferA[inOffsetA] - inBufferB[inOffsetB];\n    outBuffer[outOffset + 1] = inBufferA[inOffsetA + 1] - inBufferB[inOffsetB + 1];\n    outBuffer[outOffset + 2] = inBufferA[inOffsetA + 2] - inBufferB[inOffsetB + 2];\n\n    return outBuffer;\n};\n\nVec3.bufferSubstractInPlace = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    outBuffer[outOffset] -= inBuffer[inOffset];\n    outBuffer[outOffset + 1] -= inBuffer[inOffset + 1];\n    outBuffer[outOffset + 2] -= inBuffer[inOffset + 2];\n\n    return outBuffer;\n};\n\nVec3.bufferScale = function(outBuffer, outOffset, scale, inBuffer, inOffset)\n{\n    outBuffer[outOffset] = scale * inBuffer[inOffset];\n    outBuffer[outOffset + 1] = scale * inBuffer[inOffset + 1];\n    outBuffer[outOffset + 2] = scale * inBuffer[inOffset + 2];\n\n    return outBuffer;\n};\n\nVec3.bufferScaleInPlace = function(outBuffer, outOffset, scale)\n{\n    outBuffer[outOffset] *= scale;\n    outBuffer[outOffset + 1] *= scale;\n    outBuffer[outOffset + 2] *= scale;\n\n    return outBuffer;\n};\n\nVec3.bufferAddScaled = function(outBuffer, outOffset, inBufferA, inOffsetA, scale, inBufferB, inOffsetB)\n{\n    outBuffer[outOffset] = inBufferA[inOffsetA] + scale * inBufferB[inOffsetB];\n    outBuffer[outOffset + 1] = inBufferA[inOffsetA + 1] + scale * inBufferB[inOffsetB + 1];\n    outBuffer[outOffset + 2] = inBufferA[inOffsetA + 2] + scale * inBufferB[inOffsetB + 2];\n\n    return outBuffer;\n};\n\nVec3.bufferAddScaledInPlace = function(outBuffer, outOffset, scale, inBuffer, inOffset)\n{\n    outBuffer[outOffset] += scale * inBuffer[inOffset];\n    outBuffer[outOffset + 1] += scale * inBuffer[inOffset + 1];\n    outBuffer[outOffset + 2] += scale * inBuffer[inOffset + 2];\n\n    return outBuffer;\n};\n\nVec3.bufferNegate = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    outBuffer[outOffset] = -inBuffer[inOffset];\n    outBuffer[outOffset + 1] = -inBuffer[inOffset + 1];\n    outBuffer[outOffset + 2] = -inBuffer[inOffset + 2];\n\n    return outBuffer;\n};\n\nVec3.bufferSquareDistance = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var x = inBufferB[inOffsetB] - inBufferA[inOffsetA],\n        y = inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1],\n        z = inBufferB[inOffsetB + 2] - inBufferA[inOffsetA + 2];\n\n    return x * x + y * y + z * z;\n};\n\nVec3.bufferDistance = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var x = inBufferB[inOffsetB] - inBufferA[inOffsetA],\n        y = inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1],\n        z = inBufferB[inOffsetB + 2] - inBufferA[inOffsetA + 2];\n\n    return math.sqrt(x * x + y * y + z * z);\n};\n\nVec3.bufferSquareNorm = function(inBuffer, inOffset)\n{\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        z = inBuffer[inOffset + 2];\n\n    return x * x + y * y + z * z;\n};\n\nVec3.bufferNorm = function(inBuffer, inOffset)\n{\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        z = inBuffer[inOffset + 2];\n\n    return math.sqrt(x * x + y * y + z * z);\n};\n\nVec3.bufferNormalize = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    var x = inBuffer[inOffset],\n        y = inBuffer[inOffset + 1],\n        z = inBuffer[inOffset + 2],\n        n = x * x + y * y + z * z;\n\n    if (n < math.EPSILON2)\n    {\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = 0.0;\n        return outBuffer;\n    }\n\n    n = 1.0 / math.sqrt(n);\n    outBuffer[outOffset] = x * n;\n    outBuffer[outOffset + 1] = y * n;\n    outBuffer[outOffset + 2] = z * n;\n\n    return outBuffer;\n};\n\nVec3.bufferDotProduct = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    return inBufferA[inOffsetA] * inBufferB[inOffsetB] +\n        inBufferA[inOffsetA + 1] * inBufferB[inOffsetB + 1] +\n        inBufferA[inOffsetA + 2] * inBufferB[inOffsetB + 2];\n};\n\nVec3.bufferCrossProduct = function(outBuffer, outOffset, inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var xa = inBufferA[inOffsetA],\n        ya = inBufferA[inOffsetA + 1],\n        za = inBufferA[inOffsetA + 2],\n        xb = inBufferB[inOffsetB],\n        yb = inBufferB[inOffsetB + 1],\n        zb = inBufferB[inOffsetB + 2];\n\n    outBuffer[outOffset] = ya * zb - yb * za;\n    outBuffer[outOffset + 1] = za * xb - zb * xa;\n    outBuffer[outOffset + 2] = xa * yb - xb * ya;\n\n    return outBuffer;\n};\n\nVec3.bufferShortestAngle = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var xa = inBufferA[inOffsetA],\n        ya = inBufferA[inOffsetA + 1],\n        za = inBufferA[inOffsetA + 2],\n        na = xa * xa + ya * ya + za * za;\n\n    if (na < math.EPSILON2)\n    {\n        return 0.0;\n    }\n\n    var xb = inBufferB[inOffsetB],\n        yb = inBufferB[inOffsetB + 1],\n        zb = inBufferB[inOffsetB + 2],\n        nb = xb * xb + yb * yb + zb * zb;\n\n    if (nb < math.EPSILON2)\n    {\n        return 0.0;\n    }\n\n    var dot = xa * xb + ya * yb + za * zb;\n    if (math.abs(dot) < math.EPSILON)\n    {\n        return math.HALF_PI;\n    }\n\n    dot /= math.sqrt(na * nb);\n    if (dot > 1.0 - math.EPSILON)\n    {\n        return 0.0;\n    }\n    else if (dot < math.EPSILON - 1.0)\n    {\n        return math.PI;\n    }\n    else\n    {\n        return math.acos(dot);\n    }\n};\n\nVec3.bufferArePerpendicular = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var xa = inBufferA[inOffsetA],\n        ya = inBufferA[inOffsetA + 1],\n        za = inBufferA[inOffsetA + 2],\n        xb = inBufferB[inOffsetB],\n        yb = inBufferB[inOffsetB + 1],\n        zb = inBufferB[inOffsetB + 2];\n\n    return (((math.abs(xa) >= math.EPSILON) ||\n        (math.abs(ya) >= math.EPSILON) ||\n        (math.abs(za) >= math.EPSILON)) &&\n        ((math.abs(xb) >= math.EPSILON) ||\n            (math.abs(yb) >= math.EPSILON) ||\n            (math.abs(zb) >= math.EPSILON)) &&\n        (math.abs(xa * xb + ya * yb + za * zb) < math.EPSILON));\n};\n\nVec3.bufferAreColinear = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    var xa = inBufferA[inOffsetA],\n        ya = inBufferA[inOffsetA + 1],\n        za = inBufferA[inOffsetA + 2],\n        xb = inBufferB[inOffsetB],\n        yb = inBufferB[inOffsetB + 1],\n        zb = inBufferB[inOffsetB + 2];\n\n    return (((math.abs(xa) >= math.EPSILON) ||\n        (math.abs(ya) >= math.EPSILON) ||\n        (math.abs(za) >= math.EPSILON)) &&\n        ((math.abs(xb) >= math.EPSILON) ||\n            (math.abs(yb) >= math.EPSILON) ||\n            (math.abs(zb) >= math.EPSILON)) &&\n        (math.abs(ya * zb - yb * za) < math.EPSILON) &&\n        (math.abs(za * xb - zb * xa) < math.EPSILON) &&\n        (math.abs(xa * yb - xb * ya) < math.EPSILON));\n};\n\nVec3.bufferLinear = function(outBuffer, outOffset, inBufferP0, inOffsetP0, t, inBufferP1, inOffsetP1)\n{\n    var x = inBufferP0[inOffsetP0],\n        y = inBufferP0[inOffsetP0 + 1],\n        z = inBufferP0[inOffsetP0 + 2];\n\n    outBuffer[outOffset] = x + t * (inBufferP1[inOffsetP1] - x);\n    outBuffer[outOffset + 1] = y + t * (inBufferP1[inOffsetP1 + 1] - y);\n    outBuffer[outOffset + 2] = z + t * (inBufferP1[inOffsetP1 + 2] - z);\n\n    return outBuffer;\n};\n\nVec3.bufferQuadratic = function(outBuffer, outOffset, inBufferP0, inOffsetP0, inBufferP1, inOffsetP1, t, inBufferP2, inOffsetP2)\n{\n    //Interpolation is between points P1 and P2\n    var f0 = 0.5 * (t - 1.0) * t,\n        f1 = 1.0 - t * t,\n        f2 = 0.5 * (t + 1.0) * t;\n\n    outBuffer[outOffset] = f0 * inBufferP0[inOffsetP0] + f1 * inBufferP1[inOffsetP1] + f2 * inBufferP2[inOffsetP2];\n    outBuffer[outOffset + 1] = f0 * inBufferP0[inOffsetP0 + 1] + f1 * inBufferP1[inOffsetP1 + 1] + f2 * inBufferP2[inOffsetP2 + 1];\n    outBuffer[outOffset + 2] = f0 * inBufferP0[inOffsetP0 + 2] + f1 * inBufferP1[inOffsetP1 + 2] + f2 * inBufferP2[inOffsetP2 + 2];\n\n    return outBuffer;\n};\n\nVec3.bufferHermite = function(outBuffer, outOffset, inBufferT0, inOffsetT0, inBufferP0, inOffsetP0, t, inBufferP1, inOffsetP1, inBufferT1, inOffsetT1)\n{\n    //Ti is the tangent at point Pi\n    var tt = t * t,\n        f0 = tt * (t - 2.0) + t,\n        f1 = tt * (2.0 * t - 3.0) + 1.0,\n        f2 = tt * (3.0 - 2.0 * t),\n        f3 = tt * (t - 1.0);\n\n    outBuffer[outOffset] = f0 * inBufferT0[inOffsetT0] + f1 * inBufferP0[inOffsetP0] + f2 * inBufferP1[inOffsetP1] + f3 * inBufferT1[inOffsetT1];\n    outBuffer[outOffset + 1] = f0 * inBufferT0[inOffsetT0 + 1] + f1 * inBufferP0[inOffsetP0 + 1] + f2 * inBufferP1[inOffsetP1 + 1] + f3 * inBufferT1[inOffsetT1 + 1];\n    outBuffer[outOffset + 2] = f0 * inBufferT0[inOffsetT0 + 2] + f1 * inBufferP0[inOffsetP0 + 2] + f2 * inBufferP1[inOffsetP1 + 2] + f3 * inBufferT1[inOffsetT1 + 2];\n\n    return outBuffer;\n};\n\nVec3.bufferBezier = function(outBuffer, outOffset, inBufferC0, inOffsetC0, inBufferP0, inOffsetP0, t, inBufferP1, inOffsetP1, inBufferC1, inOffsetC1)\n{\n    //Ci is the control point at point Pi\n    //Bezier interpolation is a special Hermite interpolation with:\n    //T0 = 3 * (C0 - P0)\n    //T1 = 3 * (P1 - C1)\n    var tt = t * t,\n        lessT = 1.0 - t,\n        lessT2 = lessT * lessT,\n        f0 = 3.0 * lessT2 * t,\n        f1 = lessT2 * lessT,\n        f2 = tt * t,\n        f3 = 3.0 * lessT * tt;\n\n    outBuffer[outOffset] = f0 * inBufferC0[inOffsetC0] + f1 * inBufferP0[inOffsetP0] + f2 * inBufferP1[inOffsetP1] + f3 * inBufferC1[inOffsetC1];\n    outBuffer[outOffset + 1] = f0 * inBufferC0[inOffsetC0 + 1] + f1 * inBufferP0[inOffsetP0 + 1] + f2 * inBufferP1[inOffsetP1 + 1] + f3 * inBufferC1[inOffsetC1 + 1];\n    outBuffer[outOffset + 2] = f0 * inBufferC0[inOffsetC0 + 2] + f1 * inBufferP0[inOffsetP0 + 2] + f2 * inBufferP1[inOffsetP1 + 2] + f3 * inBufferC1[inOffsetC1 + 2];\n\n    return outBuffer;\n};\n\nVec3.bufferCatmullRom = function(outBuffer, outOffset, inBufferP0, inOffsetP0, inBufferP1, inOffsetP1, t, inBufferP2, inOffsetP2, inBufferP3, inOffsetP3)\n{\n    //Interpolation is between points P1 and P2\n    //Catmull-Rom interpolation is a special Hermite interpolation with:\n    //Ti = 0.5 * (Pi+1 - Pi-1)\n    var tt = t * t,\n        lessHalfT = -0.5 * t,\n        f0 = lessHalfT * (tt + 1.0) + tt,\n        f1 = lessHalfT * (5.0 * t - 3.0 * tt) + 1.0,\n        f2 = lessHalfT * (3.0 * tt - 4.0 * t - 1.0),\n        f3 = lessHalfT * (t - tt);\n\n    outBuffer[outOffset] = f0 * inBufferP0[inOffsetP0] + f1 * inBufferP1[inOffsetP1] + f2 * inBufferP2[inOffsetP2] + f3 * inBufferP3[inOffsetP3];\n    outBuffer[outOffset + 1] = f0 * inBufferP0[inOffsetP0 + 1] + f1 * inBufferP1[inOffsetP1 + 1] + f2 * inBufferP2[inOffsetP2 + 1] + f3 * inBufferP3[inOffsetP3 + 1];\n    outBuffer[outOffset + 2] = f0 * inBufferP0[inOffsetP0 + 2] + f1 * inBufferP1[inOffsetP1 + 2] + f2 * inBufferP2[inOffsetP2 + 2] + f3 * inBufferP3[inOffsetP3 + 2];\n\n    return outBuffer;\n};\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar math = require(\"./math\");\nvar Quat = require(\"./Quat\");\nvar Mat3 = require(\"./Mat3\");\n\nvar Mat4 = module.exports = function()\n{\n    //Always initialized to 0\n    this.buffer = new Float32Array(16);\n    this.buffer[0] = this.buffer[5] = this.buffer[10] = this.buffer[15] = 1.0;\n};\n\nMat4.prototype.setFromArray = function(arr)\n{\n    //Column 0\n    this.buffer[0] = arr[0];\n    this.buffer[1] = arr[1];\n    this.buffer[2] = arr[2];\n    this.buffer[3] = arr[3];\n\n    //Column 1\n    this.buffer[4] = arr[4];\n    this.buffer[5] = arr[5];\n    this.buffer[6] = arr[6];\n    this.buffer[7] = arr[7];\n\n    //Column 2\n    this.buffer[8] = arr[8];\n    this.buffer[9] = arr[9];\n    this.buffer[10] = arr[10];\n    this.buffer[11] = arr[11];\n\n    //Column 3\n    this.buffer[12] = arr[12];\n    this.buffer[13] = arr[13];\n    this.buffer[14] = arr[14];\n    this.buffer[15] = arr[15];\n\n    return this;\n};\n\nMat4.prototype.setColumnVec4 = function(col, v4)\n{\n    var i = col * 4,\n        inBuffer = v4.buffer;\n\n    this.buffer[i] = inBuffer[0];\n    this.buffer[i + 1] = inBuffer[1];\n    this.buffer[i + 2] = inBuffer[2];\n    this.buffer[i + 3] = inBuffer[3];\n\n    return this;\n};\n\nMat4.prototype.setFromColumnsVec4 = function(v4i, v4j, v4k, v4l)\n{\n    var inBuffer = v4i.buffer;\n    this.buffer[0] = inBuffer[0];\n    this.buffer[1] = inBuffer[1];\n    this.buffer[2] = inBuffer[2];\n    this.buffer[3] = inBuffer[3];\n\n    inBuffer = v4j.buffer;\n    this.buffer[4] = inBuffer[0];\n    this.buffer[5] = inBuffer[1];\n    this.buffer[6] = inBuffer[2];\n    this.buffer[7] = inBuffer[3];\n\n    inBuffer = v4k.buffer;\n    this.buffer[8] = inBuffer[0];\n    this.buffer[9] = inBuffer[1];\n    this.buffer[10] = inBuffer[2];\n    this.buffer[11] = inBuffer[3];\n\n    inBuffer = v4l.buffer;\n    this.buffer[12] = inBuffer[0];\n    this.buffer[13] = inBuffer[1];\n    this.buffer[14] = inBuffer[2];\n    this.buffer[15] = inBuffer[3];\n\n    return this;\n};\n\nMat4.prototype.setColumnVec3 = function(col, v3)\n{\n    var i = col * 4,\n        inBuffer = v3.buffer;\n\n    this.buffer[i] = inBuffer[0];\n    this.buffer[i + 1] = inBuffer[1];\n    this.buffer[i + 2] = inBuffer[2];\n    this.buffer[i + 3] = (col === 3) ? 1.0 : 0.0;\n\n    return this;\n};\n\nMat4.prototype.setFromColumnsVec3 = function(v3i, v3j, v3k, v3l)\n{\n    var inBuffer = v3i.buffer;\n    this.buffer[0] = inBuffer[0];\n    this.buffer[1] = inBuffer[1];\n    this.buffer[2] = inBuffer[2];\n    this.buffer[3] = 0.0;\n\n    inBuffer = v3j.buffer;\n    this.buffer[4] = inBuffer[0];\n    this.buffer[5] = inBuffer[1];\n    this.buffer[6] = inBuffer[2];\n    this.buffer[7] = 0.0;\n\n    inBuffer = v3k.buffer;\n    this.buffer[8] = inBuffer[0];\n    this.buffer[9] = inBuffer[1];\n    this.buffer[10] = inBuffer[2];\n    this.buffer[11] = 0.0;\n\n    inBuffer = v3l.buffer;\n    this.buffer[12] = inBuffer[0];\n    this.buffer[13] = inBuffer[1];\n    this.buffer[14] = inBuffer[2];\n    this.buffer[15] = 1.0;\n\n    return this;\n};\n\nMat4.prototype.setRotationFromQuat = function(q)\n{\n    //q quaternion must be a unit quaternion\n    Mat4.bufferSetRotationFromQuat(this.buffer, 0, q.buffer, 0);\n    return this;\n};\n\nMat4.prototype.setRotScaleFromMat3 = function(m3)\n{\n    Mat4.bufferSetRotScaleFromMat3(this.buffer, 0, m3.buffer, 0);\n    return this;\n};\n\nMat4.prototype.setFromTRSTransfo = function(transV3, rotQuat, scaleV3)\n{\n    //rotQuat quaternion must be a unit quaternion\n    Mat4.bufferSetFromTRSTransfo(this.buffer, 0, transV3.buffer, 0, rotQuat.buffer, 0, scaleV3.buffer, 0);\n    return this;\n};\n\nMat4.prototype.setIdentity = function()\n{\n    this.buffer[0] = this.buffer[5] = this.buffer[10] = this.buffer[15] = 1.0;\n    this.buffer[1] = this.buffer[2] = this.buffer[3] = this.buffer[4] =\n        this.buffer[6] = this.buffer[7] = this.buffer[8] = this.buffer[9] =\n        this.buffer[11] = this.buffer[12] = this.buffer[13] = this.buffer[14] = 0.0;\n\n    return this;\n};\n\nMat4.prototype.copy = function(m4)\n{\n    var inBuffer = m4.buffer;\n\n    //Column 0\n    this.buffer[0] = inBuffer[0];\n    this.buffer[1] = inBuffer[1];\n    this.buffer[2] = inBuffer[2];\n    this.buffer[3] = inBuffer[3];\n\n    //Column 1\n    this.buffer[4] = inBuffer[4];\n    this.buffer[5] = inBuffer[5];\n    this.buffer[6] = inBuffer[6];\n    this.buffer[7] = inBuffer[7];\n\n    //Column 2\n    this.buffer[8] = inBuffer[8];\n    this.buffer[9] = inBuffer[9];\n    this.buffer[10] = inBuffer[10];\n    this.buffer[11] = inBuffer[11];\n\n    //Column 3\n    this.buffer[12] = inBuffer[12];\n    this.buffer[13] = inBuffer[13];\n    this.buffer[14] = inBuffer[14];\n    this.buffer[15] = inBuffer[15];\n\n    return this;\n};\n\nMat4.prototype.getTRSTransfo = function(transV3, rotQuat, scaleV3)\n{\n    Mat4.bufferGetTRSTransfo(transV3.buffer, 0, rotQuat.buffer, 0, scaleV3.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat4.prototype.normalizeTRSTransfo = function(m4)\n{\n    Mat4.bufferNormalizeTRSTransfo(this.buffer, 0, m4.buffer, 0);\n    return this;\n};\n\nMat4.prototype.normalizeTRSTransfoInPlace = function()\n{\n    Mat4.bufferNormalizeTRSTransfo(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat4.prototype.isIdentity = function()\n{\n    return Mat4.bufferIsIdentity(this.buffer, 0);\n};\n\nMat4.prototype.equals = function(m4)\n{\n    return Mat4.bufferEquals(this.buffer, 0, m4.buffer, 0);\n};\n\nMat4.prototype.multiply = function(m4A, m4B)\n{\n    Mat4.bufferMultiply(this.buffer, 0, m4A.buffer, 0, m4B.buffer, 0);\n    return this;\n};\n\nMat4.prototype.multiplyInPlace = function(m4)\n{\n    Mat4.bufferMultiply(this.buffer, 0, this.buffer, 0, m4.buffer, 0);\n    return this;\n};\n\nMat4.prototype.invert = function(m4)\n{\n    Mat4.bufferInvert(this.buffer, 0, m4.buffer, 0);\n    return this;\n};\n\nMat4.prototype.invertInPlace = function()\n{\n    Mat4.bufferInvert(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat4.prototype.transpose = function(m4)\n{\n    Mat4.bufferTranspose(this.buffer, 0, m4.buffer, 0);\n    return this;\n};\n\nMat4.prototype.transposeInPlace = function()\n{\n    Mat4.bufferTranspose(this.buffer, 0, this.buffer, 0);\n    return this;\n};\n\nMat4.prototype.transformVec4 = function(outV4, inV4)\n{\n    Mat4.bufferTransformVec4(outV4.buffer, 0, this.buffer, 0, inV4.buffer, 0);\n    return outV4;\n};\n\nMat4.prototype.transformVec4InPlace = function(v4)\n{\n    Mat4.bufferTransformVec4(v4.buffer, 0, this.buffer, 0, v4.buffer, 0);\n    return v4;\n};\n\nMat4.prototype.transformVec3Pos = function(outV3, inV3)\n{\n    Mat4.bufferTransformVec3Pos(outV3.buffer, 0, this.buffer, 0, inV3.buffer, 0);\n    return outV3;\n};\n\nMat4.prototype.transformVec3PosInPlace = function(v3)\n{\n    Mat4.bufferTransformVec3Pos(v3.buffer, 0, this.buffer, 0, v3.buffer, 0);\n    return v3;\n};\n\nMat4.prototype.transformVec3Dir = function(outV3, inV3)\n{\n    Mat4.bufferTransformVec3Dir(outV3.buffer, 0, this.buffer, 0, inV3.buffer, 0);\n    return outV3;\n};\n\nMat4.prototype.transformVec3DirInPlace = function(v3)\n{\n    Mat4.bufferTransformVec3Dir(v3.buffer, 0, this.buffer, 0, v3.buffer, 0);\n    return v3;\n};\n\nMat4.prototype.buildFrustumProj = function(left, right, bottom, top, near, far)\n{\n    //We must have:\n    //left < right\n    //bottom < top\n    //0 < near < far (near and far are positive distances along -z direction)\n    Mat4.bufferBuildFrustumProj(this.buffer, 0, left, right, bottom, top, near, far);\n    return this;\n};\n\nMat4.prototype.buildPerspectiveProj = function(fov, aspect, near, far)\n{\n    //We must have:\n    //0 < fov < PI\n    //0 < aspect (aspect = width / height of near projection plane)\n    //0 < near < far (near and far are positive distances along -z direction)\n    Mat4.bufferBuildPerspectiveProj(this.buffer, 0, fov, aspect, near, far);\n    return this;\n};\n\nMat4.prototype.buildOrthoProj = function(left, right, bottom, top, near, far)\n{\n    //We must have:\n    //left < right\n    //bottom < top\n    //0 < near < far (near and far are positive distances along -z direction)\n    Mat4.bufferBuildOrthoProj(this.buffer, 0, left, right, bottom, top, near, far);\n    return this;\n};\n\nMat4.prototype.buildLookAtView = function(eyeV3, targetV3, upV3)\n{\n    Mat4.bufferBuildLookAtView(this.buffer, 0, eyeV3.buffer, 0, targetV3.buffer, 0, upV3.buffer, 0);\n    return this;\n};\n\nMat4.prototype.buildFPSView = function(eyeV3, pitchAngle, yawAngle)\n{\n    //We must have:\n    //- PI/2 <= pitchAngle <= PI/2\n    //0 <= yawAngle < 2.PI\n    Mat4.bufferBuildFPSView(this.buffer, 0, eyeV3.buffer, 0, pitchAngle, yawAngle);\n    return this;\n};\n\n//MUST be considered as constants\nMat4.NB_COMPONENTS = 16;\nMat4.IDENTITY = new Mat4();\n\nMat4.createBuffer = function(nbElems)\n{\n    nbElems *= 16;\n\n    //Always initialized to 0\n    var buffer = new Float32Array(nbElems);\n\n    for (var i = 0; i < nbElems; i += 16)\n    {\n        buffer[i] = buffer[i + 5] = buffer[i + 10] = buffer[i + 15] = 1.0;\n    }\n\n    return buffer;\n};\n\nMat4.bufferSetRotationFromQuat = function(outBuffer, outOffset, inQBuffer, inQOffset)\n{\n    //q quaternion must be a unit quaternion\n    var x = inQBuffer[inQOffset],\n        y = inQBuffer[inQOffset + 1],\n        z = inQBuffer[inQOffset + 2],\n        w = inQBuffer[inQOffset + 3],\n        x2 = x + x, x2x = x2 * x, x2y = x2 * y, x2z = x2 * z, x2w = x2 * w,\n        y2 = y + y, y2y = y2 * y, y2z = y2 * z, y2w = y2 * w,\n        z2 = z + z, z2z = z2 * z, z2w = z2 * w;\n\n    outBuffer[outOffset] = 1.0 - y2y - z2z;\n    outBuffer[outOffset + 1] = z2w + x2y;\n    outBuffer[outOffset + 2] = x2z - y2w;\n    outBuffer[outOffset + 3] = 0.0;\n\n    outBuffer[outOffset + 4] = x2y - z2w;\n    outBuffer[outOffset + 5] = 1.0 - x2x - z2z;\n    outBuffer[outOffset + 6] = x2w + y2z;\n    outBuffer[outOffset + 7] = 0.0;\n\n    outBuffer[outOffset + 8] = y2w + x2z;\n    outBuffer[outOffset + 9] = y2z - x2w;\n    outBuffer[outOffset + 10] = 1.0 - x2x - y2y;\n    outBuffer[outOffset + 11] = 0.0;\n\n    return outBuffer;\n};\n\nMat4.bufferSetRotScaleFromMat3 = function(outBuffer, outOffset, inMat3Buffer, inMat3Offset)\n{\n    outBuffer[outOffset] = inMat3Buffer[inMat3Offset];\n    outBuffer[outOffset + 1] = inMat3Buffer[inMat3Offset + 1];\n    outBuffer[outOffset + 2] = inMat3Buffer[inMat3Offset + 2];\n    outBuffer[outOffset + 3] = 0.0;\n\n    outBuffer[outOffset + 4] = inMat3Buffer[inMat3Offset + 3];\n    outBuffer[outOffset + 5] = inMat3Buffer[inMat3Offset + 4];\n    outBuffer[outOffset + 6] = inMat3Buffer[inMat3Offset + 5];\n    outBuffer[outOffset + 7] = 0.0;\n\n    outBuffer[outOffset + 8] = inMat3Buffer[inMat3Offset + 6];\n    outBuffer[outOffset + 9] = inMat3Buffer[inMat3Offset + 7];\n    outBuffer[outOffset + 10] = inMat3Buffer[inMat3Offset + 8];\n    outBuffer[outOffset + 11] = 0.0;\n\n    return outBuffer;\n};\n\nMat4.bufferSetFromTRSTransfo = function(outBuffer, outOffset, inTransVec3Buffer, inTransVec3Offset, inRotQuatBuffer, inRotQuatOffset, inScaleVec3Buffer, inScaleVec3Offset)\n{\n    //rotQuat quaternion must be a unit quaternion\n    var x = inRotQuatBuffer[inRotQuatOffset],\n        y = inRotQuatBuffer[inRotQuatOffset + 1],\n        z = inRotQuatBuffer[inRotQuatOffset + 2],\n        w = inRotQuatBuffer[inRotQuatOffset + 3],\n        x2 = x + x, x2x = x2 * x, x2y = x2 * y, x2z = x2 * z, x2w = x2 * w,\n        y2 = y + y, y2y = y2 * y, y2z = y2 * z, y2w = y2 * w,\n        z2 = z + z, z2z = z2 * z, z2w = z2 * w,\n        sx = inScaleVec3Buffer[inScaleVec3Offset],\n        sy = inScaleVec3Buffer[inScaleVec3Offset + 1],\n        sz = inScaleVec3Buffer[inScaleVec3Offset + 2];\n\n    outBuffer[outOffset] = (1.0 - y2y - z2z) * sx;\n    outBuffer[outOffset + 1] = (z2w + x2y) * sx;\n    outBuffer[outOffset + 2] = (x2z - y2w) * sx;\n    outBuffer[outOffset + 3] = 0.0;\n\n    outBuffer[outOffset + 4] = (x2y - z2w) * sy;\n    outBuffer[outOffset + 5] = (1.0 - x2x - z2z) * sy;\n    outBuffer[outOffset + 6] = (x2w + y2z) * sy;\n    outBuffer[outOffset + 7] = 0.0;\n\n    outBuffer[outOffset + 8] = (y2w + x2z) * sz;\n    outBuffer[outOffset + 9] = (y2z - x2w) * sz;\n    outBuffer[outOffset + 10] = (1.0 - x2x - y2y) * sz;\n    outBuffer[outOffset + 11] = 0.0;\n\n    outBuffer[outOffset + 12] = inTransVec3Buffer[inTransVec3Offset];\n    outBuffer[outOffset + 13] = inTransVec3Buffer[inTransVec3Offset + 1];\n    outBuffer[outOffset + 14] = inTransVec3Buffer[inTransVec3Offset + 2];\n    outBuffer[outOffset + 15] = 1.0;\n\n    return outBuffer;\n};\n\nMat4.bufferGetTRSTransfo = function(outTransVec3Buffer, outTransVec3Offset, outRotQuatBuffer, outRotQuatOffset, outScaleVec3Buffer, outScaleVec3Offset, inMat4Buffer, inMat4Offset)\n{\n    var buffer = Mat3._orthoNormalizeTransfo(inMat4Buffer, inMat4Offset, 4);\n\n    outScaleVec3Buffer[outScaleVec3Offset] = buffer[9];\n    outScaleVec3Buffer[outScaleVec3Offset + 1] = buffer[10];\n    outScaleVec3Buffer[outScaleVec3Offset + 2] = buffer[11];\n\n    Quat.bufferSetFromRotationMat3(outRotQuatBuffer, outRotQuatOffset, buffer, 0);\n\n    outTransVec3Buffer[outTransVec3Offset] = inMat4Buffer[inMat4Offset + 12];\n    outTransVec3Buffer[outTransVec3Offset + 1] = inMat4Buffer[inMat4Offset + 13];\n    outTransVec3Buffer[outTransVec3Offset + 2] = inMat4Buffer[inMat4Offset + 14];\n\n    return inMat4Buffer;\n};\n\nMat4.bufferNormalizeTRSTransfo = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    var buffer = Mat3._orthoNormalizeTransfo(inBuffer, inOffset, 4),\n        sx = buffer[9],\n        sy = buffer[10],\n        sz = buffer[11];\n\n    outBuffer[outOffset] = buffer[0] * sx;\n    outBuffer[outOffset + 1] = buffer[1] * sx;\n    outBuffer[outOffset + 2] = buffer[2] * sx;\n    outBuffer[outOffset + 3] = 0.0;\n\n    outBuffer[outOffset + 4] = buffer[3] * sy;\n    outBuffer[outOffset + 5] = buffer[4] * sy;\n    outBuffer[outOffset + 6] = buffer[5] * sy;\n    outBuffer[outOffset + 7] = 0.0;\n\n    outBuffer[outOffset + 8] = buffer[6] * sz;\n    outBuffer[outOffset + 9] = buffer[7] * sz;\n    outBuffer[outOffset + 10] = buffer[8] * sz;\n    outBuffer[outOffset + 11] = 0.0;\n\n    outBuffer[outOffset + 12] = inBuffer[inOffset + 12];\n    outBuffer[outOffset + 13] = inBuffer[inOffset + 13];\n    outBuffer[outOffset + 14] = inBuffer[inOffset + 14];\n    outBuffer[outOffset + 15] = 1.0;\n\n    return outBuffer;\n};\n\nMat4.bufferIsIdentity = function(inBuffer, inOffset)\n{\n    return ((math.abs(inBuffer[inOffset] - 1.0) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 1]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 2]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 3]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 4]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 5] - 1.0) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 6]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 7]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 8]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 9]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 10] - 1.0) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 11]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 12]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 13]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 14]) < math.EPSILON) &&\n        (math.abs(inBuffer[inOffset + 15] - 1.0) < math.EPSILON));\n};\n\nMat4.bufferEquals = function(inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    return (((inBufferA === inBufferB) && (inOffsetA === inOffsetB)) ||\n        ((math.abs(inBufferB[inOffsetB] - inBufferA[inOffsetA]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 1] - inBufferA[inOffsetA + 1]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 2] - inBufferA[inOffsetA + 2]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 3] - inBufferA[inOffsetA + 3]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 4] - inBufferA[inOffsetA + 4]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 5] - inBufferA[inOffsetA + 5]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 6] - inBufferA[inOffsetA + 6]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 7] - inBufferA[inOffsetA + 7]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 8] - inBufferA[inOffsetA + 8]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 9] - inBufferA[inOffsetA + 9]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 10] - inBufferA[inOffsetA + 10]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 11] - inBufferA[inOffsetA + 11]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 12] - inBufferA[inOffsetA + 12]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 13] - inBufferA[inOffsetA + 13]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 14] - inBufferA[inOffsetA + 14]) < math.EPSILON) &&\n            (math.abs(inBufferB[inOffsetB + 15] - inBufferA[inOffsetA + 15]) < math.EPSILON)));\n};\n\nMat4.bufferMultiply = function(outBuffer, outOffset, inBufferA, inOffsetA, inBufferB, inOffsetB)\n{\n    //    | m00 m10 m20 m30 |\n    //M = | m01 m11 m21 m31 |\n    //    | m02 m12 m22 m32 |\n    //    | m03 m13 m23 m33 |\n    var m00 = inBufferA[inOffsetA],\n        m01 = inBufferA[inOffsetA + 1],\n        m02 = inBufferA[inOffsetA + 2],\n        m03 = inBufferA[inOffsetA + 3],\n        m10 = inBufferA[inOffsetA + 4],\n        m11 = inBufferA[inOffsetA + 5],\n        m12 = inBufferA[inOffsetA + 6],\n        m13 = inBufferA[inOffsetA + 7],\n        m20 = inBufferA[inOffsetA + 8],\n        m21 = inBufferA[inOffsetA + 9],\n        m22 = inBufferA[inOffsetA + 10],\n        m23 = inBufferA[inOffsetA + 11],\n        m30 = inBufferA[inOffsetA + 12],\n        m31 = inBufferA[inOffsetA + 13],\n        m32 = inBufferA[inOffsetA + 14],\n        m33 = inBufferA[inOffsetA + 15],\n        x = inBufferB[inOffsetB],\n        y = inBufferB[inOffsetB + 1],\n        z = inBufferB[inOffsetB + 2],\n        w = inBufferB[inOffsetB + 3];\n\n    outBuffer[outOffset] = x * m00 + y * m10 + z * m20 + w * m30;\n    outBuffer[outOffset + 1] = x * m01 + y * m11 + z * m21 + w * m31;\n    outBuffer[outOffset + 2] = x * m02 + y * m12 + z * m22 + w * m32;\n    outBuffer[outOffset + 3] = x * m03 + y * m13 + z * m23 + w * m33;\n\n    x = inBufferB[inOffsetB + 4];\n    y = inBufferB[inOffsetB + 5];\n    z = inBufferB[inOffsetB + 6];\n    w = inBufferB[inOffsetB + 7];\n    outBuffer[outOffset + 4] = x * m00 + y * m10 + z * m20 + w * m30;\n    outBuffer[outOffset + 5] = x * m01 + y * m11 + z * m21 + w * m31;\n    outBuffer[outOffset + 6] = x * m02 + y * m12 + z * m22 + w * m32;\n    outBuffer[outOffset + 7] = x * m03 + y * m13 + z * m23 + w * m33;\n\n    x = inBufferB[inOffsetB + 8];\n    y = inBufferB[inOffsetB + 9];\n    z = inBufferB[inOffsetB + 10];\n    w = inBufferB[inOffsetB + 11];\n    outBuffer[outOffset + 8] = x * m00 + y * m10 + z * m20 + w * m30;\n    outBuffer[outOffset + 9] = x * m01 + y * m11 + z * m21 + w * m31;\n    outBuffer[outOffset + 10] = x * m02 + y * m12 + z * m22 + w * m32;\n    outBuffer[outOffset + 11] = x * m03 + y * m13 + z * m23 + w * m33;\n\n    x = inBufferB[inOffsetB + 12];\n    y = inBufferB[inOffsetB + 13];\n    z = inBufferB[inOffsetB + 14];\n    w = inBufferB[inOffsetB + 15];\n    outBuffer[outOffset + 12] = x * m00 + y * m10 + z * m20 + w * m30;\n    outBuffer[outOffset + 13] = x * m01 + y * m11 + z * m21 + w * m31;\n    outBuffer[outOffset + 14] = x * m02 + y * m12 + z * m22 + w * m32;\n    outBuffer[outOffset + 15] = x * m03 + y * m13 + z * m23 + w * m33;\n\n    return outBuffer;\n};\n\nMat4.bufferInvert = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    //    | m00 m10 m20 m30 |\n    //M = | m01 m11 m21 m31 |\n    //    | m02 m12 m22 m32 |\n    //    | m03 m13 m23 m33 |\n    var m00 = inBuffer[inOffset],\n        m01 = inBuffer[inOffset + 1],\n        m02 = inBuffer[inOffset + 2],\n        m03 = inBuffer[inOffset + 3],\n        m10 = inBuffer[inOffset + 4],\n        m11 = inBuffer[inOffset + 5],\n        m12 = inBuffer[inOffset + 6],\n        m13 = inBuffer[inOffset + 7],\n        m20 = inBuffer[inOffset + 8],\n        m21 = inBuffer[inOffset + 9],\n        m22 = inBuffer[inOffset + 10],\n        m23 = inBuffer[inOffset + 11],\n        m30 = inBuffer[inOffset + 12],\n        m31 = inBuffer[inOffset + 13],\n        m32 = inBuffer[inOffset + 14],\n        m33 = inBuffer[inOffset + 15],\n        s00 = m00 * m11 - m10 * m01,\n        s01 = m00 * m12 - m10 * m02,\n        s02 = m00 * m13 - m10 * m03,\n        s03 = m01 * m12 - m11 * m02,\n        s04 = m01 * m13 - m11 * m03,\n        s05 = m02 * m13 - m12 * m03,\n        c00 = m22 * m33 - m32 * m23,\n        c01 = m21 * m33 - m31 * m23,\n        c02 = m21 * m32 - m31 * m22,\n        c03 = m20 * m33 - m30 * m23,\n        c04 = m20 * m32 - m30 * m22,\n        c05 = m20 * m31 - m30 * m21,\n        det = s00 * c00 - s01 * c01 + s02 * c02 + s03 * c03 - s04 * c04 + s05 * c05;\n\n    if (math.abs(det) < math.EPSILON)\n    {\n        outBuffer[outOffset] = outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = outBuffer[outOffset + 3] =\n            outBuffer[outOffset + 4] = outBuffer[outOffset + 5] = outBuffer[outOffset + 6] = outBuffer[outOffset + 7] =\n            outBuffer[outOffset + 8] = outBuffer[outOffset + 9] = outBuffer[outOffset + 10] = outBuffer[outOffset + 11] =\n            outBuffer[outOffset + 12] = outBuffer[outOffset + 13] = outBuffer[outOffset + 14] = outBuffer[outOffset + 15] =\n            (det >= 0.0) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n        return outBuffer;\n    }\n\n    det = 1.0 / det;\n    outBuffer[outOffset] = (m11 * c00 - m12 * c01 + m13 * c02) * det;\n    outBuffer[outOffset + 1] = (m02 * c01 - m01 * c00 - m03 * c02) * det;\n    outBuffer[outOffset + 2] = (m31 * s05 - m32 * s04 + m33 * s03) * det;\n    outBuffer[outOffset + 3] = (m22 * s04 - m21 * s05 - m23 * s03) * det;\n    outBuffer[outOffset + 4] = (m12 * c03 - m10 * c00 - m13 * c04) * det;\n    outBuffer[outOffset + 5] = (m00 * c00 - m02 * c03 + m03 * c04) * det;\n    outBuffer[outOffset + 6] = (m32 * s02 - m30 * s05 - m33 * s01) * det;\n    outBuffer[outOffset + 7] = (m20 * s05 - m22 * s02 + m23 * s01) * det;\n    outBuffer[outOffset + 8] = (m10 * c01 - m11 * c03 + m13 * c05) * det;\n    outBuffer[outOffset + 9] = (m01 * c03 - m00 * c01 - m03 * c05) * det;\n    outBuffer[outOffset + 10] = (m30 * s04 - m31 * s02 + m33 * s00) * det;\n    outBuffer[outOffset + 11] = (m21 * s02 - m20 * s04 - m23 * s00) * det;\n    outBuffer[outOffset + 12] = (m11 * c04 - m10 * c02 - m12 * c05) * det;\n    outBuffer[outOffset + 13] = (m00 * c02 - m01 * c04 + m02 * c05) * det;\n    outBuffer[outOffset + 14] = (m31 * s01 - m30 * s03 - m32 * s00) * det;\n    outBuffer[outOffset + 15] = (m20 * s03 - m21 * s01 + m22 * s00) * det;\n\n    return outBuffer;\n};\n\nMat4.bufferTranspose = function(outBuffer, outOffset, inBuffer, inOffset)\n{\n    //    | m00 m10 m20 m30 |\n    //M = | m01 m11 m21 m31 |\n    //    | m02 m12 m22 m32 |\n    //    | m03 m13 m23 m33 |\n    var m01 = inBuffer[inOffset + 1],\n        m02 = inBuffer[inOffset + 2],\n        m03 = inBuffer[inOffset + 3],\n        m12 = inBuffer[inOffset + 6],\n        m13 = inBuffer[inOffset + 7],\n        m23 = inBuffer[inOffset + 11];\n\n    outBuffer[outOffset] = inBuffer[inOffset];\n    outBuffer[outOffset + 1] = inBuffer[inOffset + 4];\n    outBuffer[outOffset + 2] = inBuffer[inOffset + 8];\n    outBuffer[outOffset + 3] = inBuffer[inOffset + 12];\n    outBuffer[outOffset + 4] = m01;\n    outBuffer[outOffset + 5] = inBuffer[inOffset + 5];\n    outBuffer[outOffset + 6] = inBuffer[inOffset + 9];\n    outBuffer[outOffset + 7] = inBuffer[inOffset + 13];\n    outBuffer[outOffset + 8] = m02;\n    outBuffer[outOffset + 9] = m12;\n    outBuffer[outOffset + 10] = inBuffer[inOffset + 10];\n    outBuffer[outOffset + 11] = inBuffer[inOffset + 14];\n    outBuffer[outOffset + 12] = m03;\n    outBuffer[outOffset + 13] = m13;\n    outBuffer[outOffset + 14] = m23;\n    outBuffer[outOffset + 15] = inBuffer[inOffset + 15];\n\n    return outBuffer;\n};\n\nMat4.bufferTransformVec4 = function(outV4Buffer, outV4Offset, inM4Buffer, inM4Offset, inV4Buffer, inV4Offset)\n{\n    var x = inV4Buffer[inV4Offset],\n        y = inV4Buffer[inV4Offset + 1],\n        z = inV4Buffer[inV4Offset + 2],\n        w = inV4Buffer[inV4Offset + 3];\n\n    outV4Buffer[outV4Offset] = x * inM4Buffer[inM4Offset] + y * inM4Buffer[inM4Offset + 4] + z * inM4Buffer[inM4Offset + 8] + w * inM4Buffer[inM4Offset + 12];\n    outV4Buffer[outV4Offset + 1] = x * inM4Buffer[inM4Offset + 1] + y * inM4Buffer[inM4Offset + 5] + z * inM4Buffer[inM4Offset + 9] + w * inM4Buffer[inM4Offset + 13];\n    outV4Buffer[outV4Offset + 2] = x * inM4Buffer[inM4Offset + 2] + y * inM4Buffer[inM4Offset + 6] + z * inM4Buffer[inM4Offset + 10] + w * inM4Buffer[inM4Offset + 14];\n    outV4Buffer[outV4Offset + 3] = x * inM4Buffer[inM4Offset + 3] + y * inM4Buffer[inM4Offset + 7] + z * inM4Buffer[inM4Offset + 11] + w * inM4Buffer[inM4Offset + 15];\n\n    return outV4Buffer;\n};\n\nMat4.bufferTransformVec3Pos = function(outV3Buffer, outV3Offset, inM4Buffer, inM4Offset, inV3Buffer, inV3Offset)\n{\n    var x = inV3Buffer[inV3Offset],\n        y = inV3Buffer[inV3Offset + 1],\n        z = inV3Buffer[inV3Offset + 2];\n\n    outV3Buffer[outV3Offset] = x * inM4Buffer[inM4Offset] + y * inM4Buffer[inM4Offset + 4] + z * inM4Buffer[inM4Offset + 8] + inM4Buffer[inM4Offset + 12];\n    outV3Buffer[outV3Offset + 1] = x * inM4Buffer[inM4Offset + 1] + y * inM4Buffer[inM4Offset + 5] + z * inM4Buffer[inM4Offset + 9] + inM4Buffer[inM4Offset + 13];\n    outV3Buffer[outV3Offset + 2] = x * inM4Buffer[inM4Offset + 2] + y * inM4Buffer[inM4Offset + 6] + z * inM4Buffer[inM4Offset + 10] + inM4Buffer[inM4Offset + 14];\n\n    return outV3Buffer;\n};\n\nMat4.bufferTransformVec3Dir = function(outV3Buffer, outV3Offset, inM4Buffer, inM4Offset, inV3Buffer, inV3Offset)\n{\n    var x = inV3Buffer[inV3Offset],\n        y = inV3Buffer[inV3Offset + 1],\n        z = inV3Buffer[inV3Offset + 2];\n\n    outV3Buffer[outV3Offset] = x * inM4Buffer[inM4Offset] + y * inM4Buffer[inM4Offset + 4] + z * inM4Buffer[inM4Offset + 8];\n    outV3Buffer[outV3Offset + 1] = x * inM4Buffer[inM4Offset + 1] + y * inM4Buffer[inM4Offset + 5] + z * inM4Buffer[inM4Offset + 9];\n    outV3Buffer[outV3Offset + 2] = x * inM4Buffer[inM4Offset + 2] + y * inM4Buffer[inM4Offset + 6] + z * inM4Buffer[inM4Offset + 10];\n\n    return outV3Buffer;\n};\n\nMat4.bufferBuildFrustumProj = function(outBuffer, outOffset, left, right, bottom, top, near, far)\n{\n    //We must have:\n    //left < right\n    //bottom < top\n    //0 < near < far (near and far are positive distances along -z direction)\n    var rl = 1.0 / (right - left),\n        tb = 1.0 / (top - bottom),\n        nf = 1.0 / (near - far),\n        near2 = near + near;\n\n    outBuffer[outOffset] = near2 * rl;\n    outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = outBuffer[outOffset + 3] = outBuffer[outOffset + 4] = 0.0;\n    outBuffer[outOffset + 5] = near2 * tb;\n    outBuffer[outOffset + 6] = outBuffer[outOffset + 7] = 0.0;\n    outBuffer[outOffset + 8] = (right + left) * rl;\n    outBuffer[outOffset + 9] = (top + bottom) * tb;\n    outBuffer[outOffset + 10] = (far + near) * nf;\n    outBuffer[outOffset + 11] = -1.0;\n    outBuffer[outOffset + 12] = outBuffer[outOffset + 13] = 0.0;\n    outBuffer[outOffset + 14] = far * near2 * nf;\n    outBuffer[outOffset + 15] = 0.0;\n\n    return outBuffer;\n};\n\nMat4.bufferBuildPerspectiveProj = function(outBuffer, outOffset, fov, aspect, near, far)\n{\n    //We must have:\n    //0 < fov < PI\n    //0 < aspect (aspect = width / height of near projection plane)\n    //0 < near < far (near and far are positive distances along -z direction)\n    var f = 1.0 / math.tan(0.5 * fov),\n        nf = 1.0 / (near - far);\n\n    outBuffer[outOffset] = f;\n    outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = outBuffer[outOffset + 3] = outBuffer[outOffset + 4] = 0.0;\n    outBuffer[outOffset + 5] = f * aspect;\n    outBuffer[outOffset + 6] = outBuffer[outOffset + 7] = outBuffer[outOffset + 8] = outBuffer[outOffset + 9] = 0.0;\n    outBuffer[outOffset + 10] = (far + near) * nf;\n    outBuffer[outOffset + 11] = -1.0;\n    outBuffer[outOffset + 12] = outBuffer[outOffset + 13] = 0.0;\n    outBuffer[outOffset + 14] = far * (near + near) * nf;\n    outBuffer[outOffset + 15] = 0.0;\n\n    return outBuffer;\n};\n\nMat4.bufferBuildOrthoProj = function(outBuffer, outOffset, left, right, bottom, top, near, far)\n{\n    //We must have:\n    //left < right\n    //bottom < top\n    //0 < near < far (near and far are positive distances along -z direction)\n    var rl = 1.0 / (right - left),\n        tb = 1.0 / (top - bottom),\n        nf = 1.0 / (near - far);\n\n    outBuffer[outOffset] = rl + rl;\n    outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = outBuffer[outOffset + 3] = outBuffer[outOffset + 4] = 0.0;\n    outBuffer[outOffset + 5] = tb + tb;\n    outBuffer[outOffset + 6] = outBuffer[outOffset + 7] = outBuffer[outOffset + 8] = outBuffer[outOffset + 9] = 0.0;\n    outBuffer[outOffset + 10] = nf + nf;\n    outBuffer[outOffset + 11] = 0.0;\n    outBuffer[outOffset + 12] = -(right + left) * rl;\n    outBuffer[outOffset + 13] = -(top + bottom) * tb;\n    outBuffer[outOffset + 14] = (far + near) * nf;\n    outBuffer[outOffset + 15] = 1.0;\n\n    return outBuffer;\n};\n\nMat4.bufferBuildLookAtView = function(outBuffer, outOffset, eyeV3Buffer, eyeV3Offset, targetV3Buffer, targetV3Offset, upV3Buffer, upV3Offset)\n{\n    var xEye = eyeV3Buffer[eyeV3Offset],\n        yEye = eyeV3Buffer[eyeV3Offset + 1],\n        zEye = eyeV3Buffer[eyeV3Offset + 2],\n        xUp = upV3Buffer[upV3Offset],\n        yUp = upV3Buffer[upV3Offset + 1],\n        zUp = upV3Buffer[upV3Offset + 2],\n        z0 = xEye - targetV3Buffer[targetV3Offset],\n        z1 = yEye - targetV3Buffer[targetV3Offset + 1],\n        z2 = zEye - targetV3Buffer[targetV3Offset + 2],\n        n = z0 * z0 + z1 * z1 + z2 * z2;\n\n    if (n < math.EPSILON2)\n    {\n        //Invalid lookAt target, returned matrix is set to Identity\n        outBuffer[outOffset] = outBuffer[outOffset + 5] = outBuffer[outOffset + 10] = outBuffer[outOffset + 15] = 1.0;\n        outBuffer[outOffset + 1] = outBuffer[outOffset + 2] = outBuffer[outOffset + 3] = outBuffer[outOffset + 4] =\n            outBuffer[outOffset + 6] = outBuffer[outOffset + 7] = outBuffer[outOffset + 8] = outBuffer[outOffset + 9] =\n            outBuffer[outOffset + 11] = outBuffer[outOffset + 12] = outBuffer[outOffset + 13] = outBuffer[outOffset + 14] = 0.0;\n\n        return outBuffer;\n    }\n\n    n = 1.0 / math.sqrt(n);\n    z0 *= n;\n    z1 *= n;\n    z2 *= n;\n\n    var x0 = yUp * z2 - z1 * zUp,\n        x1 = zUp * z0 - z2 * xUp,\n        x2 = xUp * z1 - z0 * yUp;\n\n    n = x0 * x0 + x1 * x1 + x2 * x2;\n    if (n < math.EPSILON2)\n    {\n        x0 = x1 = x2 = 0.0; //eye->target vector is colinear with up-vector\n    }\n    else\n    {\n        n = 1.0 / math.sqrt(n);\n        x0 *= n;\n        x1 *= n;\n        x2 *= n;\n    }\n\n    var y0 = z1 * x2 - x1 * z2,\n        y1 = z2 * x0 - x2 * z0,\n        y2 = z0 * x1 - x0 * z1;\n\n    n = y0 * y0 + y1 * y1 + y2 * y2;\n    if (n < math.EPSILON2)\n    {\n        y0 = y1 = y2 = 0.0;\n    }\n    else\n    {\n        n = 1.0 / math.sqrt(n);\n        y0 *= n;\n        y1 *= n;\n        y2 *= n;\n    }\n\n    outBuffer[outOffset] = x0;\n    outBuffer[outOffset + 1] = y0;\n    outBuffer[outOffset + 2] = z0;\n    outBuffer[outOffset + 3] = 0.0;\n\n    outBuffer[outOffset + 4] = x1;\n    outBuffer[outOffset + 5] = y1;\n    outBuffer[outOffset + 6] = z1;\n    outBuffer[outOffset + 7] = 0.0;\n\n    outBuffer[outOffset + 8] = x2;\n    outBuffer[outOffset + 9] = y2;\n    outBuffer[outOffset + 10] = z2;\n    outBuffer[outOffset + 11] = 0.0;\n\n    outBuffer[outOffset + 12] = -(x0 * xEye + x1 * yEye + x2 * zEye);\n    outBuffer[outOffset + 13] = -(y0 * xEye + y1 * yEye + y2 * zEye);\n    outBuffer[outOffset + 14] = -(z0 * xEye + z1 * yEye + z2 * zEye);\n    outBuffer[outOffset + 15] = 1.0;\n\n    return outBuffer;\n};\n\nMat4.bufferBuildFPSView = function(outBuffer, outOffset, eyeV3Buffer, eyeV3Offset, pitchAngle, yawAngle)\n{\n    //We must have:\n    //- PI/2 <= pitchAngle <= PI/2\n    //0 <= yawAngle < 2.PI\n    var xEye = eyeV3Buffer[eyeV3Offset],\n        yEye = eyeV3Buffer[eyeV3Offset + 1],\n        zEye = eyeV3Buffer[eyeV3Offset + 2],\n        x0 = math.cos(yawAngle),\n        z0 = math.sin(yawAngle),\n        y1 = math.cos(pitchAngle), //y0 = 0.0\n        y2 = math.sin(pitchAngle),\n        x1 = z0 * y2,\n        x2 = -z0 * y1,\n        z1 = -x0 * y2,\n        z2 = x0 * y1;\n\n    outBuffer[outOffset] = x0;\n    outBuffer[outOffset + 1] = 0.0;\n    outBuffer[outOffset + 2] = z0;\n    outBuffer[outOffset + 3] = 0.0;\n\n    outBuffer[outOffset + 4] = x1;\n    outBuffer[outOffset + 5] = y1;\n    outBuffer[outOffset + 6] = z1;\n    outBuffer[outOffset + 7] = 0.0;\n\n    outBuffer[outOffset + 8] = x2;\n    outBuffer[outOffset + 9] = y2;\n    outBuffer[outOffset + 10] = z2;\n    outBuffer[outOffset + 11] = 0.0;\n\n    outBuffer[outOffset + 12] = -(x0 * xEye + x1 * yEye + x2 * zEye);\n    outBuffer[outOffset + 13] = -(y1 * yEye + y2 * zEye);\n    outBuffer[outOffset + 14] = -(z0 * xEye + z1 * yEye + z2 * zEye);\n    outBuffer[outOffset + 15] = 1.0;\n\n    return outBuffer;\n};\n","/**\n * Neo3D\n *\n * Copyright (C) 2015, Loïc Le Page\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nvar Mesh = require(\"./Mesh\");\n\nvar PlaneMesh = module.exports = function(width, height, vSubdivs, hSubdivs, bGenTexCoords)\n{\n    if ((typeof (width) === \"number\") && (width > 0.0))\n    {\n        width *= 0.5;\n    }\n    else\n    {\n        width = 1.0;\n    }\n\n    if ((typeof (height) === \"number\") && (height > 0.0))\n    {\n        height *= 0.5;\n    }\n    else\n    {\n        height = 1.0;\n    }\n\n    if ((typeof (vSubdivs) !== \"number\") || (vSubdivs < 1))\n    {\n        vSubdivs = 1;\n    }\n\n    if ((typeof (hSubdivs) !== \"number\") || (hSubdivs < 1))\n    {\n        hSubdivs = 1;\n    }\n\n    var nbVtx = (vSubdivs + 1) * (hSubdivs + 1);\n    while (nbVtx > 65536)\n    {\n        if (vSubdivs > hSubdivs)\n        {\n            vSubdivs >>= 1;\n        }\n        else\n        {\n            hSubdivs >>= 1;\n        }\n\n        nbVtx = (vSubdivs + 1) * (hSubdivs + 1);\n    }\n\n    var indexType = Mesh.INDEX_TYPE.NO_INDEX;\n    if (nbVtx > 4)\n    {\n        indexType = Mesh.INDEX_TYPE.UNSIGNED_SHORT;\n    }\n\n    Mesh.call(this, Mesh.PRIMITIVE_TYPE.TRIANGLE_STRIP, indexType);\n\n    this._dim = [-width, -height, width, height];\n    this._subdivs = [vSubdivs, hSubdivs];\n    this._bGenTexCoords = (bGenTexCoords === true);\n};\n\nPlaneMesh.prototype = Object.create(Mesh.prototype);\nPlaneMesh.prototype.constructor = PlaneMesh;\n\nPlaneMesh.prototype._initAttribConfig = function()\n{\n    var attribConfig = new Mesh.AttribConfig();\n    if (this._bGenTexCoords)\n    {\n        attribConfig.stride = 20; //size of [x, y, z, u, v] floats\n    }\n\n    this._attribConfigList[Mesh.ATTRIB_TYPE.VERTEX] = attribConfig;\n\n    if (this._bGenTexCoords)\n    {\n        attribConfig = new Mesh.AttribConfig();\n        attribConfig.nbComponents = 2;\n        attribConfig.offset = 12; //size of [x, y, z] floats\n        attribConfig.stride = 20; //size of [x, y, z, u, v] floats\n\n        this._attribConfigList[Mesh.ATTRIB_TYPE.TEX_COORDS] = attribConfig;\n    }\n\n    this._pointCount = 2 * this._subdivs[0] * (this._subdivs[1] + 2) - 2;\n};\n\nPlaneMesh.prototype._initVBO = function()\n{\n    var vtx;\n\n    if (this._indexType === Mesh.INDEX_TYPE.UNSIGNED_SHORT)\n    {\n        var idx = [],\n            x = this._dim[0],\n            y = this._dim[1],\n            xStep = (this._dim[2] - this._dim[0]) / this._subdivs[0],\n            yStep = (this._dim[3] - this._dim[1]) / this._subdivs[1],\n            index = 0,\n            i = 0,\n            j = 0;\n\n        vtx = [];\n\n        if (this._bGenTexCoords)\n        {\n            var u = 0.0,\n                v = 0.0,\n                uStep = 1.0 / this._subdivs[0],\n                vStep = 1.0 / this._subdivs[1];\n\n            for (i = 0; i <= this._subdivs[0]; ++i)\n            {\n                for (j = 0; j < this._subdivs[1]; ++j)\n                {\n                    vtx.push(x, y, 0.0, u, v);\n\n                    y += yStep;\n                    v += vStep;\n\n                    if (i < this._subdivs[0])\n                    {\n                        idx.push(index++, index + this._subdivs[1]);\n                    }\n                }\n\n                vtx.push(x, this._dim[3], 0.0, u, 1.0);\n\n                if (i < this._subdivs[0] - 1)\n                {\n                    x += xStep;\n                    u += uStep;\n                }\n                else\n                {\n                    x = this._dim[2];\n                    u = 1.0;\n                }\n\n                if (i < this._subdivs[0])\n                {\n                    idx.push(index++, index + this._subdivs[1]);\n\n                    //Add degenerated triangles to strip to get back to next\n                    //column bottom\n                    if (i < this._subdivs[0] - 1)\n                    {\n                        idx.push(index + this._subdivs[1], index);\n                    }\n                }\n\n                y = this._dim[1];\n                v = 0.0;\n            }\n        }\n        else\n        {\n            for (i = 0; i <= this._subdivs[0]; ++i)\n            {\n                for (j = 0; j < this._subdivs[1]; ++j)\n                {\n                    vtx.push(x, y, 0.0);\n\n                    y += yStep;\n\n                    if (i < this._subdivs[0])\n                    {\n                        idx.push(index++, index + this._subdivs[1]);\n                    }\n                }\n\n                vtx.push(x, this._dim[3], 0.0);\n\n                if (i < this._subdivs[0] - 1)\n                {\n                    x += xStep;\n                }\n                else\n                {\n                    x = this._dim[2];\n                }\n\n                if (i < this._subdivs[0])\n                {\n                    idx.push(index++, index + this._subdivs[1]);\n\n                    //Add degenerated triangles to strip to get back to next\n                    //column bottom\n                    if (i < this._subdivs[0] - 1)\n                    {\n                        idx.push(index + this._subdivs[1], index);\n                    }\n                }\n\n                y = this._dim[1];\n            }\n        }\n\n        this._indexVBO = this._createStaticVBO(new Uint16Array(idx), true);\n    }\n    else if (this._bGenTexCoords)\n    {\n        vtx = [\n            this._dim[0], this._dim[1], 0.0, 0.0, 0.0,\n            this._dim[2], this._dim[1], 0.0, 1.0, 0.0,\n            this._dim[0], this._dim[3], 0.0, 0.0, 1.0,\n            this._dim[2], this._dim[3], 0.0, 1.0, 1.0\n        ];\n    }\n    else\n    {\n        vtx = [\n            this._dim[0], this._dim[1], 0.0,\n            this._dim[2], this._dim[1], 0.0,\n            this._dim[0], this._dim[3], 0.0,\n            this._dim[2], this._dim[3], 0.0\n        ];\n    }\n\n    this._attribVBOList[0] = this._createStaticVBO(new Float32Array(vtx));\n};\n"],"sourceRoot":""}